<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeiLiu</title>
  
  <subtitle>有一句Hello World想要对你说</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://heiliu.github.io/"/>
  <updated>2019-11-06T10:22:27.742Z</updated>
  <id>https://heiliu.github.io/</id>
  
  <author>
    <name>刘江龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记一个伪元素的骚操作</title>
    <link href="https://heiliu.github.io/2019/10/25/beforeAfter/"/>
    <id>https://heiliu.github.io/2019/10/25/beforeAfter/</id>
    <published>2019-10-24T16:00:00.000Z</published>
    <updated>2019-11-06T10:22:27.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用伪元素实现气泡框"><a href="#用伪元素实现气泡框" class="headerlink" title="用伪元素实现气泡框"></a>用伪元素实现气泡框</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>  &nbsp;&nbsp;&nbsp;&nbsp;在项目开发中本来自己负责的基础组件库里面的 <code>Tooltip</code> 组件没有达到预期的效果(有八阿哥)…<br>  &nbsp;&nbsp;&nbsp;&nbsp;后来想到其实可以用伪元素实现一个类似的气泡弹窗，但是又想到一个问题：我每个元素的气泡内容不一样这尼玛怎么填进去呢？<br>  &nbsp;&nbsp;&nbsp;&nbsp;于是乎，查文档、还真在文档里让我发现了一点有用的东西，通过 <code>attr()</code> CSS表达式和一个<code>自定义数据属性</code> data-descr 创建一个纯CSS, 内容提示气泡如下：  </p>  <iframe src="https://codesandbox.io/embed/crazy-chatterjee-9h066?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="crazy-chatterjee-9h066" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"><a href="https://codesandbox.io/s/crazy-chatterjee-9h066?fontsize=14" target="_blank" rel="noopener">https://codesandbox.io/s/crazy-chatterjee-9h066?fontsize=14</a></iframe><p>相关属性： 自定义属性 data-desrc 表达式 attr()  </p><p>兼容性： 还不错哦！！</p><h2 id="各种链接如下："><a href="#各种链接如下：" class="headerlink" title="各种链接如下："></a>各种链接如下：</h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after" target="_blank" rel="noopener"> data-descr_Demo链接</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr" target="_blank" rel="noopener">attr() 具体文档</a></p></li><li><p><a href="https://caniuse.com/#search=attr(" target="_blank" rel="noopener">canIUse</a>) </p></li><li><a href="https://codesandbox.io/s/crazy-chatterjee-9h066?fontsize=14" target="_blank" rel="noopener">Demo地址</a></li></ul><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>伪元素实现气泡提示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">data-descr</span>=<span class="string">"伪元素"</span>&gt;</span>伪元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">data-descr</span>=<span class="string">"实现"</span>&gt;</span>实现<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">data-descr</span>=<span class="string">"气泡提示"</span>&gt;</span>气泡提示<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-attr">[data-descr]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-descr);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#202020</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-attr">[data-descr]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#202020</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: transparent;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用伪元素实现气泡框&quot;&gt;&lt;a href=&quot;#用伪元素实现气泡框&quot; class=&quot;headerlink&quot; title=&quot;用伪元素实现气泡框&quot;&gt;&lt;/a&gt;用伪元素实现气泡框&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Skill" scheme="https://heiliu.github.io/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>单行文本换行与多行文本换行</title>
    <link href="https://heiliu.github.io/2019/10/23/text-overflow/"/>
    <id>https://heiliu.github.io/2019/10/23/text-overflow/</id>
    <published>2019-10-23T08:23:00.000Z</published>
    <updated>2019-10-23T08:24:05.434Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/entry/5aa1f4916fb9a028b92cbdcc" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/entry/5aa1f4916fb9a028b92cbdcc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Poratls --传送门</title>
    <link href="https://heiliu.github.io/2019/10/22/react_Portal/"/>
    <id>https://heiliu.github.io/2019/10/22/react_Portal/</id>
    <published>2019-10-22T09:50:00.000Z</published>
    <updated>2019-11-06T10:21:11.056Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中常常会需要对话框、下拉列表、悬浮窗等交互的组件，当在父组件中使用一个下拉列表的时候，父组件的大小是固定的、同时还有一些overflow: hidden;子组件想要完全展示就变得比较困难，或者不能完全展示、或者阴影被父组件overflow给hidden掉了，同时在用overflow去清除浮动的影响的时候也要考虑到副作用，当元素比较多或者内容比较大的时候会不会被截断的问题。这个当想让子元素的层级最高而且不用被父元素给截断的时候就需要一个容器或者元素能够脱离父组件，至少从视觉上就得脱离父组件的影响。  </p><p>Portals 是 react 16 官方提供的解决方案， 使得组件可以脱离父组件从而挂载在页面的任何地方。</p><p>在做组件层级的时候 应用的skill<br><a href="https://xuzpeng.github.io/2019/05/04/React%E4%BC%A0%E9%80%81%E9%97%A8-Portal/" target="_blank" rel="noopener">文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中常常会需要对话框、下拉列表、悬浮窗等交互的组件，当在父组件中使用一个下拉列表的时候，父组件的大小是固定的、同时还有一些overflow: hidden;子组件想要完全展示就变得比较困难，或者不能完全展示、或者阴影被父组件overflow给hidden掉了，同时在用o
      
    
    </summary>
    
    
      <category term="前端" scheme="https://heiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>在 React 中使用 mobx 进行状态管理</title>
    <link href="https://heiliu.github.io/2019/10/14/mobx-react/"/>
    <id>https://heiliu.github.io/2019/10/14/mobx-react/</id>
    <published>2019-10-13T16:00:00.000Z</published>
    <updated>2019-11-06T10:21:25.460Z</updated>
    
    <content type="html"><![CDATA[<p>observable<br>inject<br>computed<br>action </p><p>RunInAction<br>Reaction </p><p>调试</p><p>toJs 需要引入 =&gt; 不如直接 JSON.stringify()方便</p><p>不用使用数组索引或者任何将来可能会改变的值作为 key 。如果需要的话为你的对象生成 ids。</p><p><a href="https://cn.mobx.js.org/best/react-performance.html" target="_blank" rel="noopener">参考技巧</a></p><!-- 中文排序 --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123;<span class="attr">name</span>:<span class="string">'武汉'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'北京'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'上海'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'天津'</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> resultArray = array.sort(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compareFunction</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param1.name.localeCompare(param2.name,<span class="string">"zh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(resultArray);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;observable&lt;br&gt;inject&lt;br&gt;computed&lt;br&gt;action &lt;/p&gt;
&lt;p&gt;RunInAction&lt;br&gt;Reaction &lt;/p&gt;
&lt;p&gt;调试&lt;/p&gt;
&lt;p&gt;toJs 需要引入 =&amp;gt; 不如直接 JSON.stringify()方便&lt;/p&gt;

      
    
    </summary>
    
      <category term="React" scheme="https://heiliu.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>classnames 的用法总结</title>
    <link href="https://heiliu.github.io/2019/10/13/classnames/"/>
    <id>https://heiliu.github.io/2019/10/13/classnames/</id>
    <published>2019-10-12T16:00:00.000Z</published>
    <updated>2019-11-06T10:22:06.962Z</updated>
    
    <content type="html"><![CDATA[<!-- TODO --><p><a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">classnames github库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TODO --&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/JedWatson/classnames&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;classnames github库&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>VS Code 快捷键</title>
    <link href="https://heiliu.github.io/2019/10/13/VsCodeShortCuts/"/>
    <id>https://heiliu.github.io/2019/10/13/VsCodeShortCuts/</id>
    <published>2019-10-12T16:00:00.000Z</published>
    <updated>2019-10-13T13:59:51.530Z</updated>
    
    <content type="html"><![CDATA[<!-- TODO --><h1 id="文档编辑中键盘快捷方式"><a href="#文档编辑中键盘快捷方式" class="headerlink" title="文档编辑中键盘快捷方式"></a>文档编辑中键盘快捷方式</h1><ul><li>快速移动光标（按单词跳: option <- -> </-></li><li>选中操作: <strong>shift <- -></-></strong> </li><li>搜索时切换搜索结果: <strong>shift Enter</strong> </li><li>文件相对路径: shift command H 原shortCut =&gt; 自定义 <strong>command H</strong> </li><li>新建未命名文件: command N  </li><li>搜索光标所在单词: command E </li><li>选中所在的代码块(select Bracket)，对花括号的代码块较友好: <strong>option command B</strong> </li><li>切换tab: <strong>option commmad <- -></-></strong> </li><li>删除整个单词: <strong>option backspace</strong></li><li>向上下复制整行: <strong>option shift <- -></-></strong> 上下方向键</li><li>找到当前文件所有与选中相同的文档 达到批量修改的目的(change all ocurrences): <strong>shift command I</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TODO --&gt;
&lt;h1 id=&quot;文档编辑中键盘快捷方式&quot;&gt;&lt;a href=&quot;#文档编辑中键盘快捷方式&quot; class=&quot;headerlink&quot; title=&quot;文档编辑中键盘快捷方式&quot;&gt;&lt;/a&gt;文档编辑中键盘快捷方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;快速移动光标（按单词跳: o
      
    
    </summary>
    
      <category term="笔记" scheme="https://heiliu.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Note" scheme="https://heiliu.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heiliu.github.io/2019/08/29/NginxGetStart/"/>
    <id>https://heiliu.github.io/2019/08/29/NginxGetStart/</id>
    <published>2019-08-29T10:14:41.350Z</published>
    <updated>2019-08-29T10:14:55.038Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.javaboy.org/2019/0605/nginx-guide.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.javaboy.org/2019/0605/nginx-guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React-router V4</title>
    <link href="https://heiliu.github.io/2019/08/21/reactRouter/"/>
    <id>https://heiliu.github.io/2019/08/21/reactRouter/</id>
    <published>2019-08-20T16:00:00.000Z</published>
    <updated>2019-11-06T10:21:06.801Z</updated>
    
    <content type="html"><![CDATA[<p>React 创建的单页应用中、通过路由来控制页面间的跳转，常用的就是 react-router、react-router-dom</p><h1 id="React-Router中有三类组件"><a href="#React-Router中有三类组件" class="headerlink" title="React Router中有三类组件"></a>React Router中有三类组件</h1><ul><li>路由组件 BrowserRouter, HashRouter  </li><li>路由匹配组件 Route, Switch  </li><li>导航、链接组件 Link</li></ul><blockquote><p>基于 React Router 的 web 应用，根组件应该是一个 router 组件（BrowserRouter，HashRouter ）。 项目中，react-router-dom 提供了和两种路由。两种路由都会创建一个 history 对象。如果我们的应用有服务器响应 web 的请求，我们通常使用<browserrouter>组件; 如果使用静态文件服务器，则我们应该使用<hashrouter>组件  通常都是使用 <browserrouter></browserrouter></hashrouter></browserrouter></p></blockquote><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>Link 组件最终会渲染为 HTML 标签 <a>，它的 to、query、hash 属性会被组合在一起并渲染为 href 属性。虽然 Link 被渲染为超链接，但在内部实现上使用脚本拦截了浏览器的默认行为，然后调用了history.pushState 方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React 创建的单页应用中、通过路由来控制页面间的跳转，常用的就是 react-router、react-router-dom&lt;/p&gt;
&lt;h1 id=&quot;React-Router中有三类组件&quot;&gt;&lt;a href=&quot;#React-Router中有三类组件&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="React" scheme="https://heiliu.github.io/categories/React/"/>
    
    
      <category term="React-router" scheme="https://heiliu.github.io/tags/React-router/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 相关</title>
    <link href="https://heiliu.github.io/2019/08/15/webpack/"/>
    <id>https://heiliu.github.io/2019/08/15/webpack/</id>
    <published>2019-08-15T09:37:21.189Z</published>
    <updated>2019-11-06T03:37:30.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="及时补"><a href="#及时补" class="headerlink" title="及时补"></a>及时补</h1><p>一篇篇都是欠下的债</p><p><a href="https://juejin.im/post/5cea1e1ae51d4510664d1652" target="_blank" rel="noopener">参考链接</a><br><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">官方文档传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;及时补&quot;&gt;&lt;a href=&quot;#及时补&quot; class=&quot;headerlink&quot; title=&quot;及时补&quot;&gt;&lt;/a&gt;及时补&lt;/h1&gt;&lt;p&gt;一篇篇都是欠下的债&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5cea1e1ae51d45106
      
    
    </summary>
    
      <category term="前端" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webPack" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/webPack/"/>
    
    
      <category term="WebPack" scheme="https://heiliu.github.io/tags/WebPack/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习与整理</title>
    <link href="https://heiliu.github.io/2019/08/15/DesignPatterns/"/>
    <id>https://heiliu.github.io/2019/08/15/DesignPatterns/</id>
    <published>2019-08-15T06:22:55.389Z</published>
    <updated>2019-08-15T06:24:07.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;
      
    
    </summary>
    
      <category term="Skill" scheme="https://heiliu.github.io/categories/Skill/"/>
    
    
      <category term="Note" scheme="https://heiliu.github.io/tags/Note/"/>
    
      <category term="Skill" scheme="https://heiliu.github.io/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>Axios</title>
    <link href="https://heiliu.github.io/2019/08/15/Axios/"/>
    <id>https://heiliu.github.io/2019/08/15/Axios/</id>
    <published>2019-08-14T16:00:00.000Z</published>
    <updated>2019-11-06T03:29:53.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="先从fetch讲起"><a href="#先从fetch讲起" class="headerlink" title="先从fetch讲起"></a>先从fetch讲起</h2><p>一个简单的fetch例子如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'./api/person.json'</span>)</span><br><span class="line">  .then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (response.status !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Looks like there was a problem. Status Code: '</span> +</span><br><span class="line">          response.status);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Examine the text in the response</span></span><br><span class="line">      <span class="comment">// 将返回数据 Json 化</span></span><br><span class="line">      response.json().then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Fetch Error :-S'</span>, err);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="number">1.</span> .json()返回一个被解析为<span class="built_in">JSON</span>格式的<span class="string">`promise`</span>对象，当获取成功时，我们使用 json() 读取并解析数据</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用async-await简化"><a href="#使用async-await简化" class="headerlink" title="使用async/await简化"></a>使用async/await简化</h3><p>由于Fetch底层是用Promise实现，我们可以直接用async来优化上面的代码，减少回调，使其更加语义化、容易理解， 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">geturl</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> fetch(<span class="string">'./api/some.json'</span>)</span><br><span class="line"><span class="keyword">if</span>(res.status == <span class="number">200</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> res.text())</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span>(err)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// response 其他返回数据</span></span><br><span class="line">fetch(<span class="string">'users.json'</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers.get(<span class="string">'Content-Type'</span>));</span><br><span class="line">    <span class="built_in">console</span>.log(response.headers.get(<span class="string">'Date'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(response.status);</span><br><span class="line">    <span class="built_in">console</span>.log(response.statusText);</span><br><span class="line">    <span class="built_in">console</span>.log(response.type);</span><br><span class="line">    <span class="built_in">console</span>.log(response.url);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Response-类型"><a href="#Response-类型" class="headerlink" title="Response 类型"></a>Response 类型</h4><p>当我们发起一个Fetch请求时，返回的response响应会自带一个response.type属性（basic、cors、opaque）。response.type属性说明了异步资源的来源，同时还有相应的处理方式。<br>当我们发起一个同源请求时，response.type为basic，而且你可以从response读取全部信息。<br>如果我们访问一个非同源域名，并且有返回相应的CORs响应头时，那么该请求类型是cors。  cors和basic很相似，就除了cors响应里你无法访问Cache-Control，Content-Language，Content-Type，Expires，Last-Modified和Pragma<br>当我们对一个不同源的域名发起请求时，如果返回的响应头部没有CORS信息，那么这个response对应的类型就是opaque类型。一个opaque响应是无法读取返回的数据、状态，甚至无法确定这个请求是否成功。<br>我们可以自定义Fetch请求的模式，要求返回对应类型的响应，有以下几种响应：</p><ul><li>1.same-origin 只返回同源请求，其他类型会被reject  </li><li>2.cors 接收同源、非同源请求，返回有CORs头部的响应  </li><li>3.cors-with-forced-preflight 在发出请求前会先做一次安全性检查  </li><li>4.no-cors 用来发起没有CORS头部并且非同源请求，并且会返回opaque响应。但是目前这种类型只能在Service Worker里使用，在window.fetch里不能用  </li></ul><h3 id="POST请求类型"><a href="#POST请求类型" class="headerlink" title="POST请求类型"></a>POST请求类型</h3><p>使用Fetch发起Post请求时，需要手动设置method参数和body参数，如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">"Content-type"</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: <span class="string">'foo=bar&amp;lorem=ipsum'</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(json)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request succeeded with JSON response'</span>, data);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Request failed'</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><h3 id="带-COOKIE-发送请求"><a href="#带-COOKIE-发送请求" class="headerlink" title="带 COOKIE 发送请求"></a>带 COOKIE 发送请求</h3><p>在异步请求中带上cookie参数，那么需要显式指定credentials参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">  credentials: <span class="string">'include'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul><li>从浏览器中创建 XMLHttpRequests  </li><li>从 node.js 创建 http 请求  </li><li>支持 Promise API  </li><li>拦截请求和响应  </li><li>转换请求数据和响应数据  </li><li>取消请求  </li><li>自动转换 JSON 数据  </li><li>客户端支持防御 XSRF  </li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>npm 安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install axios</span><br></pre></td></tr></table></figure></p><p>使用cdn:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><h3 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a>响应结构</h3><p>响应返回包含信息：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status: <span class="number">200</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText: <span class="string">'OK'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `headers` 服务器响应的头</span></span><br><span class="line">  headers: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// `config` 是为请求提供的配置信息</span></span><br><span class="line">  config: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://www.kancloud.cn/yunye/axios/234845" target="_blank" rel="noopener">文档传送门</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;先从fetch讲起&quot;&gt;&lt;a href=&quot;#先从fetch讲起&quot; class=&quot;headerlink&quot; title=&quot;先从fetch讲起&quot;&gt;&lt;/a&gt;先从fetch讲起&lt;/h2&gt;&lt;p&gt;一个简单的fetch例子如下：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetch(&lt;span class=&quot;string&quot;&gt;&#39;./api/person.json&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .then(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;response&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (response.status !== &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Looks like there was a problem. Status Code: &#39;&lt;/span&gt; +&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          response.status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// Examine the text in the response&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;// 将返回数据 Json 化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      response.json().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Fetch Error :-S&#39;&lt;/span&gt;, err);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; .json()返回一个被解析为&lt;span class=&quot;built_in&quot;&gt;JSON&lt;/span&gt;格式的&lt;span class=&quot;string&quot;&gt;`promise`&lt;/span&gt;对象，当获取成功时，我们使用 json() 读取并解析数据&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Skill" scheme="https://heiliu.github.io/categories/Skill/"/>
    
      <category term="JavaScript" scheme="https://heiliu.github.io/categories/Skill/JavaScript/"/>
    
    
      <category term="前端" scheme="https://heiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>E2E 测试</title>
    <link href="https://heiliu.github.io/2019/08/14/E2ETest/"/>
    <id>https://heiliu.github.io/2019/08/14/E2ETest/</id>
    <published>2019-08-13T16:00:00.000Z</published>
    <updated>2019-11-06T10:21:45.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><a href="https://segmentfault.com/a/1190000015724775" target="_blank" rel="noopener">参考链接</a>  </p><h2 id="小程序自动化"><a href="#小程序自动化" class="headerlink" title="小程序自动化"></a>小程序自动化</h2><p>小程序自动化SDK为开发者提供了一套通过外部脚本操控小程序的方案，从而实现小程序自动化测试的目的。  </p><p>通过该 SDK，你可以做到以下事情：</p><ul><li>控制小程序跳转到指定页面  </li><li>获取小程序页面数据  </li><li>获取小程序页面元素状态  </li><li>触发小程序元素绑定事件  </li><li>往 AppService 注入代码片段  </li><li>调用 wx 对象上任意接口  </li></ul><p>安装小程序自动化SDK：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install miniprogram-automator --save-dev</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000015724775&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="Test" scheme="https://heiliu.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="https://heiliu.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>去除 inline 元素之间的间距</title>
    <link href="https://heiliu.github.io/2019/08/13/spaceBetweenInlineBlock/"/>
    <id>https://heiliu.github.io/2019/08/13/spaceBetweenInlineBlock/</id>
    <published>2019-08-12T16:00:00.000Z</published>
    <updated>2019-10-13T09:30:57.217Z</updated>
    
    <content type="html"><![CDATA[<p>这个问题曾经在哪一次的面试中被问到过，当时只知道是空白的文本节点在作祟，但是问到解决的方法，却没有答上来，今天在项目里碰到了详细了解了一下，记录一下。  </p><!-- TODO --><p><a href="https://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/" target="_blank" rel="noopener">详情参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这个问题曾经在哪一次的面试中被问到过，当时只知道是空白的文本节点在作祟，但是问到解决的方法，却没有答上来，今天在项目里碰到了详细了解了一下，记录一下。  &lt;/p&gt;
&lt;!-- TODO --&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhangxinxu.com/wo
      
    
    </summary>
    
      <category term="面试" scheme="https://heiliu.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="https://heiliu.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
      <category term="前端" scheme="https://heiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heiliu.github.io/2019/08/12/setPerformance/"/>
    <id>https://heiliu.github.io/2019/08/12/setPerformance/</id>
    <published>2019-08-12T03:48:34.349Z</published>
    <updated>2019-11-06T10:20:07.282Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 利用set提高性能<br>tags:</p><ul><li>JavaScript<br>categories: </li><li>前端</li><li>JavaScript</li></ul><hr><!-- TODO --><p><a href="https://blog.51cto.com/13957060/2419632" target="_blank" rel="noopener">详情</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 利用set提高性能&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;br&gt;categories: &lt;/li&gt;
&lt;li&gt;前端&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;!-- TODO --&gt;
&lt;p&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="https://heiliu.github.io/2019/08/05/Array/"/>
    <id>https://heiliu.github.io/2019/08/05/Array/</id>
    <published>2019-08-04T23:42:00.000Z</published>
    <updated>2019-11-06T10:22:48.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><blockquote><p>一个存储元素的线性集合， 元素可以通过索引（通常为数字）来任意存取。  </p></blockquote><p>数字索引在内部被转换为字符串类型、这是因为在javaScript中对象的属性名必须是字符串。而数组只是一种特殊的对象</p><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ul><li><p>通过<code>构造函数</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传入一组元素进行数组初始化 --&gt;</span><br><span class="line"><span class="keyword">var</span> arr = New <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">print(arr.length); <span class="comment">// 5</span></span><br><span class="line">&lt;!-- 只传一个元素，声明数组的初始化长度, 其中每个元素初始化为 <span class="literal">undefined</span> --&gt;</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>);</span><br><span class="line">print(arr1.length); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><a id="more"></a></li><li>通过字面量 <code>[]</code> 创建  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">print(arr2.length); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>区别<br>虽然两种创建数组的方法产生的效果一样，但是还是存在一些细微的差别。而且你会发现，在JS开源库中，通过第一种方法来创建数组基本上看不到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'using[]'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000000</span>; i++)&#123;<span class="keyword">var</span> arr = []&#125;;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'using[]'</span>)  <span class="comment">// using[]: 29.630859375ms</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">'using new'</span>)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2000000</span>; i++)&#123;<span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>&#125;;</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">'using new'</span>)  <span class="comment">// using new: 39.93798828125ms</span></span><br></pre></td></tr></table></figure><p>通过对比会发现使用new关键字来创建数组花费的时间更长，<code>实际上</code>使用new来创建会多一个实例化的过程，在Javascript里分配大量的new变量地址是一项很慢的操作，为了效率起见，你应该始终使用对象符号。虽然<code>只有在大批量数据的情况下才会有影响</code>.</p><p>创建一个字符串的方式有：‘字符串’或者是new String(‘字符串’)，一种是直接创建了一个字符串，一个是调用字符串的构造函数创建字符串对象然后再创建这个字符串，中间多了一个创建对象的过程，也许这在一般情况下是看不出什么区别的，但是像上述例子中，当数据足够大的时候，就会发现了问题所在。因此，如果可以通过[]创建一个纯净的数组，就不需要通过new Array()来创建数组。</p></li></ul><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>isArray </p><p>存取函数  </p><blockquote><p>用来访问数组元素的函数，返回目标数组的某种变体  </p></blockquote><p>indexOf() 返回第一个与参数相同的元素的索引, 不存在返回 -1</p><p>lastIndexOf 返回相同元素中最后一个元素的索引,不存在返回 -1</p><p>数组的字符串表示  </p><p>join()</p><p>toString()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"David"</span>,<span class="string">"Cynthia"</span>,<span class="string">"Raymond"</span>,<span class="string">"Clayton"</span>,<span class="string">"Mike"</span>,<span class="string">"Jennifer"</span>];</span><br><span class="line"><span class="keyword">var</span> namestr = names.join();</span><br><span class="line">print(namestr); <span class="comment">// David,Cynthia,Raymond,Clayton,Mike,Jennifer</span></span><br><span class="line">namestr = names.toString();</span><br><span class="line">print(namestr); <span class="comment">// David,Cynthia,Raymond,Clayton,Mike,Jennifer</span></span><br></pre></td></tr></table></figure><p>由已有数组创建新的数组  </p><p>concat()  合并多个数组创建一个新数组<br>splice()  截取一个数组的子集创建一个新数组<br>slice() </p><p>使用 splice() 方法为数组添加元素，需提供如下参数：<br>• 起始索引（也就是你希望开始添加元素的地方）；<br>• 需要删除的元素个数（<code>添加元素时该参数设为 0</code>）；<br>• 想要添加进数组的元素。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> newElements = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line">nums.splice(<span class="number">3</span>,<span class="number">0</span>,newElements);</span><br><span class="line">print(nums); <span class="comment">// 1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure></p><p>可变函数  </p><blockquote><p>能够改变数组的内容的函数  </p></blockquote><p>push() 在末尾添加元素<br>pop() 删除末尾的元素</p><p>shift()<br>unshift() 添加元素到数组的开头</p><p>reverse() 翻转数组<br>sort()<br>对数组进行排序是经常会遇到的需求，如果元素是字符串类型，那么sort() 就非常好使：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">"David"</span>,<span class="string">"Mike"</span>,<span class="string">"Cynthia"</span>,<span class="string">"Clayton"</span>,<span class="string">"Bryan"</span>,<span class="string">"Raymond"</span>];</span><br><span class="line">names.sort();</span><br><span class="line">print(names); <span class="comment">// Bryan,Clayton,Cynthia,David,Mike,Raymond</span></span><br></pre></td></tr></table></figure></p><p>但是如果数组元素是数字类型，sort() 方法的排序结果就不能让人满意了：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>];nums.sort();print(nums); <span class="comment">// 1,100,2,200,3,4sort()</span></span><br></pre></td></tr></table></figure></p><p>方法是按照<code>字典顺序</code>对元素进行排序的，因此它 <code>假定元素都是字符串类型</code>，在上一个例子中，即使元素是数字类型，也被认为是字符串类型。为了让 sort() 方法也能排序数字类型的元素，可以在调用方法时传入一个大小比较函数，排序时，sort() 方法将会根据该函数比较数组中两个元素的大小，从而决定整个数组的顺序。<br><code>对于数字类型，该函数可以是一个简单的相减操作，从一个数字中减去另外一个数字。如果结果为负，那么被减数小于减数；如果结果为 0，那么被减数与减数相等；如果结果为正，那么被减数大于减数。</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 - num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">100</span>,<span class="number">4</span>,<span class="number">200</span>];</span><br><span class="line">nums.sort(compare);print(nums); <span class="comment">// 1,2,3,4,100,200</span></span><br></pre></td></tr></table></figure></p><p>sort() 函数使用了 compare() 函数对数组按照数字大小进行排序，而不是按照字典顺序。</p><p>迭代器方法  </p><p>其实可以多展开来讲的 map foreach filter reduce 的区别</p><ul><li>forEach()  </li><li>every()  </li><li>some()  </li><li>map()  </li><li>filter()  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;h3 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一个存储元素的线性集合， 元素可以通过索引（通常为数字）来任意存取。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;数字索引在内部被转换为字符串类型、这是因为在javaScript中对象的属性名必须是字符串。而数组只是一种特殊的对象&lt;/p&gt;
&lt;h3 id=&quot;创建数组&quot;&gt;&lt;a href=&quot;#创建数组&quot; class=&quot;headerlink&quot; title=&quot;创建数组&quot;&gt;&lt;/a&gt;创建数组&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;构造函数&lt;/code&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 传入一组元素进行数组初始化 --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = New &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(arr.length); &lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!-- 只传一个元素，声明数组的初始化长度, 其中每个元素初始化为 &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; --&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(arr1.length); &lt;span class=&quot;comment&quot;&gt;// 10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="前端" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Note" scheme="https://heiliu.github.io/tags/Note/"/>
    
      <category term="JavaScript" scheme="https://heiliu.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>同一台电脑配置多个SSH</title>
    <link href="https://heiliu.github.io/2019/07/31/multiSSH/"/>
    <id>https://heiliu.github.io/2019/07/31/multiSSH/</id>
    <published>2019-07-30T16:00:00.000Z</published>
    <updated>2019-11-06T10:17:34.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置多个SSH"><a href="#配置多个SSH" class="headerlink" title="配置多个SSH"></a>配置多个SSH</h2><p>在工作中多访问公司的gitlab仓库，而在生活中又有自己的github仓库<br>记录一下方便日后查找</p><hr><p>一般电脑中的SSH key 存放在 <code>～/.ssh</code>目录中 如果有配置过的话存在 <code>id_rsa</code> \ <code>id_rsa.pub</code> 私钥和公钥, 将公钥配置到需要的代码平台</p><p>生成SSH key</p><h3 id="本地配置多个ssh-key"><a href="#本地配置多个ssh-key" class="headerlink" title="本地配置多个ssh key"></a>本地配置多个ssh key</h3><ul><li><p>1、为公司生成一对秘钥ssh key  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">'yourEmail@xx.com'</span> -f ~<span class="regexp">/.ssh/gi</span>tlab_id_rsa</span><br></pre></td></tr></table></figure></li><li><p>2、为github生成一对秘钥ssh key  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">'yourEmail2@xx.com'</span> -f ~<span class="regexp">/.ssh/gi</span>thub_id_rsa</span><br></pre></td></tr></table></figure></li><li><p>3、在~/.ssh目录下新建名称为<code>config</code>的文件（无后缀名）。  用于配置多个不同的host使用不同的ssh key，常用内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># gitlab</span><br><span class="line">Host gitlab.planetmeican.com</span><br><span class="line">    HostName gitlab.planetmeican.com</span><br><span class="line">    Port <span class="number">2345</span></span><br><span class="line">    User git</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~<span class="regexp">/.ssh/gi</span>tlab_id_rsa</span><br><span class="line"># github</span><br><span class="line">Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~<span class="regexp">/.ssh/gi</span>thub_id_rsa</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件参数"><a href="#配置文件参数" class="headerlink" title="配置文件参数"></a>配置文件参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件</span><br><span class="line"># port: 端口号，一般不需要配置</span><br><span class="line"># HostName : 要登录主机的主机名</span><br><span class="line">#PreferredAuthentications: 授权验证方式</span><br><span class="line"># User : 登录名</span><br><span class="line"># IdentityFile : 指明上面User对应的identityFile路径</span><br></pre></td></tr></table></figure><ul><li>4、分别往gitlab和github上添加生成的公钥</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置多个SSH&quot;&gt;&lt;a href=&quot;#配置多个SSH&quot; class=&quot;headerlink&quot; title=&quot;配置多个SSH&quot;&gt;&lt;/a&gt;配置多个SSH&lt;/h2&gt;&lt;p&gt;在工作中多访问公司的gitlab仓库，而在生活中又有自己的github仓库&lt;br&gt;记录一下方便日后查
      
    
    </summary>
    
      <category term="倒腾" scheme="https://heiliu.github.io/categories/%E5%80%92%E8%85%BE/"/>
    
      <category term="Note" scheme="https://heiliu.github.io/categories/%E5%80%92%E8%85%BE/Note/"/>
    
      <category term="Git" scheme="https://heiliu.github.io/categories/%E5%80%92%E8%85%BE/Note/Git/"/>
    
    
      <category term="Git" scheme="https://heiliu.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>react-redux中Provider、connect</title>
    <link href="https://heiliu.github.io/2019/07/29/provider&amp;&amp;connect/"/>
    <id>https://heiliu.github.io/2019/07/29/provider&amp;&amp;connect/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2019-11-06T10:18:50.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-redux中Provider"><a href="#react-redux中Provider" class="headerlink" title="react-redux中Provider"></a>react-redux中Provider</h2><p><a href="https://www.cnblogs.com/sameen/p/9182925.html" target="_blank" rel="noopener">详情</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-redux中Provider&quot;&gt;&lt;a href=&quot;#react-redux中Provider&quot; class=&quot;headerlink&quot; title=&quot;react-redux中Provider&quot;&gt;&lt;/a&gt;react-redux中Provider&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="React" scheme="https://heiliu.github.io/categories/React/"/>
    
      <category term="Note" scheme="https://heiliu.github.io/categories/React/Note/"/>
    
    
      <category term="前端" scheme="https://heiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>NPM 参数</title>
    <link href="https://heiliu.github.io/2019/07/29/npmParams/"/>
    <id>https://heiliu.github.io/2019/07/29/npmParams/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2019-11-06T10:18:35.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm-参数"><a href="#npm-参数" class="headerlink" title="npm 参数"></a>npm 参数</h2><p>npm install -g webpack<br>npm install prop-types –save-dev</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;npm-参数&quot;&gt;&lt;a href=&quot;#npm-参数&quot; class=&quot;headerlink&quot; title=&quot;npm 参数&quot;&gt;&lt;/a&gt;npm 参数&lt;/h2&gt;&lt;p&gt;npm install -g webpack&lt;br&gt;npm install prop-types –save
      
    
    </summary>
    
      <category term="Skill" scheme="https://heiliu.github.io/categories/Skill/"/>
    
      <category term="前端" scheme="https://heiliu.github.io/categories/Skill/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Node" scheme="https://heiliu.github.io/categories/Skill/%E5%89%8D%E7%AB%AF/Node/"/>
    
    
      <category term="前端" scheme="https://heiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>serverless了解</title>
    <link href="https://heiliu.github.io/2019/07/29/serverless/"/>
    <id>https://heiliu.github.io/2019/07/29/serverless/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2019-11-06T10:19:58.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="serverless"><a href="#serverless" class="headerlink" title="serverless"></a>serverless</h1><blockquote><p>根据 CNCF 的定义，Serverless 是指构建和运行不需要服务器管理的应用程序的概念。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;serverless&quot;&gt;&lt;a href=&quot;#serverless&quot; class=&quot;headerlink&quot; title=&quot;serverless&quot;&gt;&lt;/a&gt;serverless&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;根据 CNCF 的定义，Serverless 是指
      
    
    </summary>
    
      <category term="server" scheme="https://heiliu.github.io/categories/server/"/>
    
    
      <category term="Skill" scheme="https://heiliu.github.io/tags/Skill/"/>
    
      <category term="倒腾" scheme="https://heiliu.github.io/tags/%E5%80%92%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heiliu.github.io/2019/07/28/0722/"/>
    <id>https://heiliu.github.io/2019/07/28/0722/</id>
    <published>2019-07-28T13:29:50.981Z</published>
    <updated>2019-11-06T10:22:56.244Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 前端开发工具整理<br>date: 2019-07-22<br>copyright: true</p><h2 id="tags-Note"><a href="#tags-Note" class="headerlink" title="tags: Note"></a>tags: Note</h2><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具:"></a>开发工具:</h2><p><strong>1.代码编辑器</strong>  </p><ul><li><p>visual studio Code  </p><ul><li><p>插件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- Chinese 中文插件</span><br><span class="line">- language-Stylus </span><br><span class="line">- LeetCode</span><br><span class="line">- Vetur</span><br><span class="line">- Prettier</span><br><span class="line">- React/Redux/react-router Snippets react便捷输入</span><br><span class="line">- prettier</span><br><span class="line">- GitLens</span><br><span class="line">- Markdown All in One</span><br><span class="line">- npm Intellisense</span><br><span class="line">- Quokka.js</span><br><span class="line">- Relative Path</span><br><span class="line">- JavaScript code snippets</span><br><span class="line">- CSS Peek</span><br><span class="line">- Bracket Pair Colorizer</span><br><span class="line">- Better Comments</span><br></pre></td></tr></table></figure></li><li><p>主题  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">one dark pro</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>2.浏览器及插件</strong></p><p>   Chrome 浏览器</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Ghelper 翻墙插件 可在GitHub上获取</span><br><span class="line">ADBlock</span><br><span class="line">marinara（番茄工作法助理）</span><br><span class="line">FireShot</span><br><span class="line">扩展管理器</span><br><span class="line">WEB前端助手</span><br><span class="line">划词翻译</span><br><span class="line">Imagus</span><br><span class="line">Octotree</span><br><span class="line">React/Vue develop Tool</span><br><span class="line">Chrono</span><br><span class="line">掘金插件</span><br><span class="line">Json-handle</span><br></pre></td></tr></table></figure><p><strong>3.其他工具</strong>  </p><ul><li><p>命令行开发工具：  </p><ul><li>iterm2  </li><li>homebrew</li><li>oh-my-zsh  </li></ul></li><li><p>Git/gitLab &amp;&amp; 配置SSH  </p></li><li><p>node &amp;&amp; NVM  </p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">nvm install <span class="number">8.9</span><span class="number">.0</span> <span class="comment">// 安装需要的node版本</span></span><br><span class="line">nvm use <span class="number">8.9</span><span class="number">.0</span> <span class="comment">// 切换使用相对应的node版本</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 前端开发工具整理&lt;br&gt;date: 2019-07-22&lt;br&gt;copyright: true&lt;/p&gt;
&lt;h2 id=&quot;tags-Note&quot;&gt;&lt;a href=&quot;#tags-Note&quot; class=&quot;headerlink&quot; title=&quot;tags: N
      
    
    </summary>
    
    
  </entry>
  
</feed>
