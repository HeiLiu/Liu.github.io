<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeiLiu</title>
  
  <subtitle>有一句Hello World想要对你说</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://heiliu.github.io/"/>
  <updated>2019-11-24T09:43:19.182Z</updated>
  <id>https://heiliu.github.io/</id>
  
  <author>
    <name>青衣诶</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>React Hook学习</title>
    <link href="https://heiliu.github.io/2019/11/18/reactHooks/"/>
    <id>https://heiliu.github.io/2019/11/18/reactHooks/</id>
    <published>2019-11-18T04:59:41.324Z</published>
    <updated>2019-11-24T09:43:19.182Z</updated>
    
    <content type="html"><![CDATA[<p>  Hooks 在React 16.8以上的版本中才可以使用</p><h2 id="Hook-定义"><a href="#Hook-定义" class="headerlink" title="Hook 定义"></a>Hook 定义</h2><p>   Hook 是一些可以让你在函数组件里“钩入” React state 及生命周期等特性的<code>函数</code>。Hook 不能在 class 组件中使用 —— 它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p><h3 id="Hook-使用了-JavaScript-的闭包机制"><a href="#Hook-使用了-JavaScript-的闭包机制" class="headerlink" title="Hook 使用了 JavaScript 的闭包机制"></a>Hook 使用了 JavaScript 的闭包机制</h3><h3 id="React-并不会放弃-class"><a href="#React-并不会放弃-class" class="headerlink" title="React 并不会放弃 class"></a>React 并不会放弃 class</h3><h4 id="Class-的缺陷："><a href="#Class-的缺陷：" class="headerlink" title="Class 的缺陷："></a>Class 的缺陷：</h4><ul><li>this 的指向问题，在函数组件的编写中经常会碰到this的指向问题 </li><li>编译过后的代码大小 </li><li>Javascript实现的类本身比较鸡肋，没有类似Java/C++多继承的概念，类的逻辑复用是个问题 </li><li>Class Component在React内部是当做Javascript Function类来处理的</li></ul><h2 id="Hook-使用规则"><a href="#Hook-使用规则" class="headerlink" title="Hook 使用规则"></a>Hook 使用规则</h2><p>  Hook 就是 JavaScript 函数，但是使用它们会有两个额外的规则：</p><ul><li>只能在函数最外层调用 Hook。<strong>不要在循环、条件判断或者子函数中调用</strong>。</li><li><code>只能</code>在 React 的函数组件或者自定义的Hook中调用 Hook。</li></ul><!-- 这一行放哪里好呢 --><ul><li><p>使用 Hook 从组件中提取状态逻辑，使得这些逻辑可以单独测试并复用。</p><p>  在实际编写底层组件库中常常会配合 useState Hook 进行测试, 因为我们的最底层的组件通常应该是被设计成 <code>stateless</code> 的，需要外部传入props 进行控制测试</p></li></ul><h2 id="相关-Hook-的使用"><a href="#相关-Hook-的使用" class="headerlink" title="相关 Hook 的使用"></a>相关 Hook 的使用</h2><h3 id="useState-Hook"><a href="#useState-Hook" class="headerlink" title="useState Hook"></a>useState Hook</h3><p>  在函数组件中、通过 useState Hook 可以使用在class中的 state 特性；返回一个状态以及这个状态的 setter 方法。</p><h3 id="useEffect-Hook"><a href="#useEffect-Hook" class="headerlink" title="useEffect Hook"></a>useEffect Hook</h3><p>  在每次渲染后都会调用 useEffect 中的函数,它让我们在函数组件中存储内部 state </p><p>  在文档中 被翻译成副作用（感觉即将废弃的那几个生命周期才更应该是称得上“副作用”），即我们原来在 class 组件中的 componentDidMount、componentDidUpdate 和 componentWillUnmount  中做得获取数据、销毁操作都被认为是 </p><p>  与 componentDidMount 或 componentDidUpdate 不同，使用 useEffect 调度的 effect 不会阻塞浏览器更新屏幕，这让你的应用看起来响应更快(effect 是异步的操作)。大多数情况下，effect 不需要同步地执行。在个别情况下（例如测量布局），有单独的 useLayoutEffect Hook 供你使用，其 API 与 useEffect 相同。</p><p>  与useState传入的是具体state不同，useEffect传入的是一个callback函数，与useState最大的不同是执行时机，useEffect callback是在<strong>组件被渲染为真实DOM后执行</strong>（所以可以用于DOM操作）</p><ul><li><p>Demo01 </p><ul><li>Test -&gt; useState Hook</li><li>useEffect Hook</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Example = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 相当于 componentDidMount 和 componentDidUpdate:</span></span><br><span class="line">  <span class="comment">// 在执行 DOM 更新之后调用</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 在render后输出点击的次数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        CLICK CRAZY!</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>副作用函数还可以通过返回一个函数来指定如何“清除”副作用。 </p><p>当在 useEffect 中 返回一个函数的话，这个函数相当于原先 class组件中的 componentWillUnmount 的时候调用</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以添加第二个参数、只要第二个参数发生变化、return中的方法也会执行</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>);</span><br><span class="line">    <span class="comment">// 相当于 unmount</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Bye...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果传入 第二个参数 监听某个state变化而执行、实现性能优化，在监听的元素发生变化后才调用 effect</span></span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">        Click me</span></span><br><span class="line"><span class="regexp">      &lt;/</span>button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="useContext-Hook"><a href="#useContext-Hook" class="headerlink" title="useContext Hook"></a>useContext Hook</h3><p>useContext 的参数必须是 context 对象本身</p><h3 id="useCallback-Hook"><a href="#useCallback-Hook" class="headerlink" title="useCallback Hook"></a>useCallback Hook</h3><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ul><li><p><a href="https://zh-hans.reactjs.org/docs/hooks-overview.html" target="_blank" rel="noopener">React Hooks 文档</a> </p></li><li><p><a href="https://zhuanlan.zhihu.com/p/92211533?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=29558355001344" target="_blank" rel="noopener">React Hooks 完全上手指南</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  Hooks 在React 16.8以上的版本中才可以使用&lt;/p&gt;
&lt;h2 id=&quot;Hook-定义&quot;&gt;&lt;a href=&quot;#Hook-定义&quot; class=&quot;headerlink&quot; title=&quot;Hook 定义&quot;&gt;&lt;/a&gt;Hook 定义&lt;/h2&gt;&lt;p&gt;   Hook 是一些可
      
    
    </summary>
    
      <category term="前端" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>待办事项</title>
    <link href="https://heiliu.github.io/2019/11/15/TODOs/"/>
    <id>https://heiliu.github.io/2019/11/15/TODOs/</id>
    <published>2019-11-15T05:20:13.327Z</published>
    <updated>2019-11-15T05:21:17.891Z</updated>
    
    <content type="html"><![CDATA[<ul><li>技术胖<ul><li>Rect Hook 实战</li><li>Nginx</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;技术胖&lt;ul&gt;
&lt;li&gt;Rect Hook 实战&lt;/li&gt;
&lt;li&gt;Nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Iterm2 相关</title>
    <link href="https://heiliu.github.io/2019/11/13/iterm2/"/>
    <id>https://heiliu.github.io/2019/11/13/iterm2/</id>
    <published>2019-11-13T06:19:05.917Z</published>
    <updated>2019-11-14T08:10:58.971Z</updated>
    
    <content type="html"><![CDATA[<p>command + D / command + shift + D 分屏</p><p><a href="https://www.jianshu.com/p/3436bcb17a03" target="_blank" rel="noopener">快捷键参考</a></p><ul><li>发病期有3-5天、不管怎么治疗，吃不吃药都会恶化，所以前期还是要有一个好的心态。</li><li>避免面部吹风、准备口罩围巾啥的裹好一点，骑车漏风的话就打车吧</li><li>多给脸部按摩</li><li>保持积极的心态、保证休息时间</li><li>补充营养、维生素b1、甲钴胺（这个具体得问医生了）</li><li>复诊的时候问清楚医生这个能不能针灸以及针灸有没有用，有用的话可以看看中医，中西结合治疗。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;command + D / command + shift + D 分屏&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/3436bcb17a03&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;快捷键参考&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Homebrew 的使用</title>
    <link href="https://heiliu.github.io/2019/11/12/homeBrew/"/>
    <id>https://heiliu.github.io/2019/11/12/homeBrew/</id>
    <published>2019-11-12T07:11:26.095Z</published>
    <updated>2019-11-12T07:17:09.534Z</updated>
    
    <content type="html"><![CDATA[<p>Homebrew： 家酿</p><!-- TODO --><p><a href="https://crispgm.com/page/dive-in-homebrew.html" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Homebrew： 家酿&lt;/p&gt;
&lt;!-- TODO --&gt;
&lt;p&gt;&lt;a href=&quot;https://crispgm.com/page/dive-in-homebrew.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>不在node 中处理管理前端资源</title>
    <link href="https://heiliu.github.io/2019/11/12/staticFiles/"/>
    <id>https://heiliu.github.io/2019/11/12/staticFiles/</id>
    <published>2019-11-12T03:29:16.640Z</published>
    <updated>2019-11-12T03:38:13.631Z</updated>
    
    <content type="html"><![CDATA[<p>nodebestpractice<br><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/production/frontendout.chinese.md" target="_blank" rel="noopener">资源</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nodebestpractice&lt;br&gt;&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/production/frontendout.chinese.md&quot; ta
      
    
    </summary>
    
      <category term="Node最佳实践" scheme="https://heiliu.github.io/categories/Node%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>委托可能的一切</title>
    <link href="https://heiliu.github.io/2019/11/12/emm/"/>
    <id>https://heiliu.github.io/2019/11/12/emm/</id>
    <published>2019-11-12T03:18:30.435Z</published>
    <updated>2019-11-12T03:25:21.503Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/production/delegatetoproxy.chinese.md" target="_blank" rel="noopener">委托任何可能的 (例如静态内容，gzip) 到反向代理</a></p><p><a href="http://blog.argteam.com/coding/hardening-node-js-for-production-part-2-using-nginx-to-avoid-node-js-load" target="_blank" rel="noopener">argTeam</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/production/delegatetoproxy.chinese.md&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
      <category term="Node最佳实践" scheme="https://heiliu.github.io/categories/Node%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>九、十月复盘</title>
    <link href="https://heiliu.github.io/2019/11/06/20191106/"/>
    <id>https://heiliu.github.io/2019/11/06/20191106/</id>
    <published>2019-11-06T14:50:00.000Z</published>
    <updated>2019-11-07T09:23:59.652Z</updated>
    
    <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="对不住您嘞，密码不太对，再瞅瞅？" data-whm="抱歉，这个文章不能被校验，不过您还是能看看解密后的内容。"> <div class="hbe-input-container"> <input type="password" id="hbePass" placeholder="加密文章，可能是个人情感宣泄或者生活记录。" /> <label>加密文章，可能是个人情感宣泄或者生活记录。</label> <div class="bottom-line"></div> </div> <script id="hbeData" type="hbeData" data-hmacdigest="5a27385c22e332dbe768bf82538eb2c8b03315a0a302dba98851d8f86bc1498f"></script> </div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      原始文字是人类用来纪录特定事物、简化图像而成的书写符号。文字在发展早期都是图画形式的，有些是以形表意，有些是以形表音，其中有表意文字，与语音无甚关系，中国文字便是从此渐次演变而成。有些中文字可以从表面、部首、字旁看到一些联系旁通的字义。而这些特色是拼音文字所没有的。其实这是一篇加密文章，需要密码查看。
    
    </summary>
    
      <category term="有感" scheme="https://heiliu.github.io/categories/%E6%9C%89%E6%84%9F/"/>
    
    
      <category term="生活" scheme="https://heiliu.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="有感" scheme="https://heiliu.github.io/tags/%E6%9C%89%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Prettier 相关</title>
    <link href="https://heiliu.github.io/2019/11/06/prettier/"/>
    <id>https://heiliu.github.io/2019/11/06/prettier/</id>
    <published>2019-11-06T11:08:00.000Z</published>
    <updated>2019-11-06T11:11:38.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prettier-介绍"><a href="#Prettier-介绍" class="headerlink" title="Prettier 介绍"></a>Prettier 介绍</h2><h2 id="Prettier-配置"><a href="#Prettier-配置" class="headerlink" title="Prettier 配置"></a>Prettier 配置</h2><h2 id="Prettier-NPM-包"><a href="#Prettier-NPM-包" class="headerlink" title="Prettier NPM 包"></a>Prettier NPM 包</h2><p>yarn prettier:check;</p><h2 id="Prettier-插件"><a href="#Prettier-插件" class="headerlink" title="Prettier 插件"></a>Prettier 插件</h2><!-- 未完待续 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Prettier-介绍&quot;&gt;&lt;a href=&quot;#Prettier-介绍&quot; class=&quot;headerlink&quot; title=&quot;Prettier 介绍&quot;&gt;&lt;/a&gt;Prettier 介绍&lt;/h2&gt;&lt;h2 id=&quot;Prettier-配置&quot;&gt;&lt;a href=&quot;#Pretti
      
    
    </summary>
    
      <category term="Skill" scheme="https://heiliu.github.io/categories/Skill/"/>
    
    
      <category term="Prettier" scheme="https://heiliu.github.io/tags/Prettier/"/>
    
  </entry>
  
  <entry>
    <title>React中的Refs</title>
    <link href="https://heiliu.github.io/2019/10/26/reactRefs/"/>
    <id>https://heiliu.github.io/2019/10/26/reactRefs/</id>
    <published>2019-10-26T14:33:00.000Z</published>
    <updated>2019-12-10T01:00:43.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><p><strong>官方说明</strong>： <code>Refs 提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素</code>。</p><p>在React开发中、想要操作元素的状态一般是修改State、或者是修改传入的props。但是有时候一些效果不能通过如此操作实现，例如开发中常常碰到的： </p><ul><li>输入框的焦点获取、比如打开登录界面登录框自动获取焦点 </li><li>动态的根据一个元素的大小/距离 计算另外一个元素的大小 </li></ul><h2 id="使用-Ref"><a href="#使用-Ref" class="headerlink" title="使用 Ref"></a>使用 Ref</h2><p>目前的React版本（16.11.0）中 <code>Refs</code> 的用法如下： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React form <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="comment">// 创建</span></span><br><span class="line">    <span class="keyword">this</span>.myRef = React.createRef();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 传入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;this.myRef&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>对于节点的访问:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> node = <span class="keyword">this</span>.myRef.current;</span><br></pre></td></tr></table></figure></p><p>说明： </p><ul><li>1.通过调用 React.createRef 创建了一个 React ref 并将其赋值给 this.myRef 变量。 </li><li><ol start="2"><li>指定 ref 为 JSX 属性，将this.myRef 传入; ref 和 key 一样不属于 props属性，二者都会被 React 特殊处理和维护。</li></ol></li><li><ol start="3"><li>ref 挂载以后，ref.current 指向 ref 所在节点</li></ol></li></ul><p>如果之前用过 React，你可能了解之前的 ref 可以通过 this.refs.inputRef 来访问 DOM 节点、如下所示，这个 ref 是字符串类型的，在使用上来说似乎更加方便。现在官方版本不建议再使用它，因为 string 类型的 refs 存在问题。它属于<code>过时</code> API 并可能会在未来的版本被移除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React form <span class="string">'react'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyInput</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.refs.inputRef.focus();</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// 还能用 但不建议</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"inputRef"</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Ref的值"><a href="#Ref的值" class="headerlink" title="Ref的值"></a>Ref的值</h2><p>官方文档中有说明，ref 的值根据节点的类型不同而有所不同：</p><ul><li>当 ref 属性用于 HTML 元素时，构造函数中使用 React.createRef() 创建的 ref 接收底层 DOM 元素作为其 current 属性。可以访问元素的宽高等属性、input框还可以调用focus方法实现自动聚焦</li><li>当 ref 属性用于自定义 class 组件时，ref 对象接收组件的挂载实例作为其 current 属性。即可以通过 current <code>调用组件中的方法</code></li></ul><p>不能在函数组件上使用 ref 属性，因为他们没有实例。</p><h2 id="回调-Refs"><a href="#回调-Refs" class="headerlink" title="回调 Refs"></a>回调 Refs</h2><p>更加精细的控制 refs 的传递, 可以达到类似 props 的传递效果，在需要的地方传入inputRef </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 官方 Demo</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CustomTextInput</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input ref=&#123;props.inputRef&#125; /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class Parent extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;CustomTextInput</span></span><br><span class="line"><span class="regexp">        inputRef=&#123;el =&gt; this.inputElement = el&#125;</span></span><br><span class="line"><span class="regexp">      /</span>&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>官方说明</strong>： </p><p>如果 ref 回调函数是以内联函数的方式定义的，在更新过程中它会被执行两次，第一次传入参数 null，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个新的函数实例，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 class 的绑定函数的方式可以避免上述问题，但是大多数情况下它是无关紧要的。</p><h2 id="Refs-转发"><a href="#Refs-转发" class="headerlink" title="Refs 转发"></a>Refs 转发</h2><h2 id="ref-Hook"><a href="#ref-Hook" class="headerlink" title="ref Hook"></a>ref Hook</h2><p>useRef() 是 React 提供的在 Hooks 中获取 DOM 元素的方法。<br>使用方法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useRef&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RefDemo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> onButtonClick=<span class="function"><span class="params">()</span>=&gt;</span>&#123; </span><br><span class="line">        inputEl.current.value=<span class="string">"Hello, Ref"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(inputEl); <span class="comment">//输出获取到的DOM节点</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &#123;<span class="comment">/*保存input的ref到inputEl */</span>&#125;</span><br><span class="line">            &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span>/&gt;</span><br><span class="line">            &lt;button onClick = &#123;onButtonClick&#125;&gt;展示&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> RefDemo;</span><br></pre></td></tr></table></figure></p><!-- TODO --><p><a href="https://zh-hans.reactjs.org/docs/refs-and-the-dom.html" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Refs&quot;&gt;&lt;a href=&quot;#Refs&quot; class=&quot;headerlink&quot; title=&quot;Refs&quot;&gt;&lt;/a&gt;Refs&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;官方说明&lt;/strong&gt;： &lt;code&gt;Refs 提供了一种方式，允许我们访问 DOM 节点或在 rend
      
    
    </summary>
    
      <category term="前端" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/React/"/>
    
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>记一个伪元素的骚操作</title>
    <link href="https://heiliu.github.io/2019/10/25/beforeAfter/"/>
    <id>https://heiliu.github.io/2019/10/25/beforeAfter/</id>
    <published>2019-10-24T16:00:00.000Z</published>
    <updated>2019-11-06T10:22:27.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用伪元素实现气泡框"><a href="#用伪元素实现气泡框" class="headerlink" title="用伪元素实现气泡框"></a>用伪元素实现气泡框</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>  &nbsp;&nbsp;&nbsp;&nbsp;在项目开发中本来自己负责的基础组件库里面的 <code>Tooltip</code> 组件没有达到预期的效果(有八阿哥)…<br>  &nbsp;&nbsp;&nbsp;&nbsp;后来想到其实可以用伪元素实现一个类似的气泡弹窗，但是又想到一个问题：我每个元素的气泡内容不一样这尼玛怎么填进去呢？<br>  &nbsp;&nbsp;&nbsp;&nbsp;于是乎，查文档、还真在文档里让我发现了一点有用的东西，通过 <code>attr()</code> CSS表达式和一个<code>自定义数据属性</code> data-descr 创建一个纯CSS, 内容提示气泡如下：  </p>  <iframe src="https://codesandbox.io/embed/crazy-chatterjee-9h066?fontsize=14" style="width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;" title="crazy-chatterjee-9h066" allow="geolocation; microphone; camera; midi; vr; accelerometer; gyroscope; payment; ambient-light-sensor; encrypted-media; usb" sandbox="allow-modals allow-forms allow-popups allow-scripts allow-same-origin"><a href="https://codesandbox.io/s/crazy-chatterjee-9h066?fontsize=14" target="_blank" rel="noopener">https://codesandbox.io/s/crazy-chatterjee-9h066?fontsize=14</a></iframe><p>相关属性： 自定义属性 data-desrc 表达式 attr()  </p><p>兼容性： 还不错哦！！</p><h2 id="各种链接如下："><a href="#各种链接如下：" class="headerlink" title="各种链接如下："></a>各种链接如下：</h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/::after" target="_blank" rel="noopener"> data-descr_Demo链接</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/attr" target="_blank" rel="noopener">attr() 具体文档</a></p></li><li><p><a href="https://caniuse.com/#search=attr(" target="_blank" rel="noopener">canIUse</a>) </p></li><li><a href="https://codesandbox.io/s/crazy-chatterjee-9h066?fontsize=14" target="_blank" rel="noopener">Demo地址</a></li></ul><h2 id="相关代码"><a href="#相关代码" class="headerlink" title="相关代码"></a>相关代码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>伪元素实现气泡提示<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">data-descr</span>=<span class="string">"伪元素"</span>&gt;</span>伪元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">data-descr</span>=<span class="string">"实现"</span>&gt;</span>实现<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"tooltip"</span> <span class="attr">data-descr</span>=<span class="string">"气泡提示"</span>&gt;</span>气泡提示<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-attr">[data-descr]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">attr</span>(data-descr);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: left;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#202020</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tooltip</span><span class="selector-attr">[data-descr]</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">15px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#202020</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-right-color</span>: transparent;</span><br><span class="line">  <span class="attribute">border-bottom-color</span>: transparent;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用伪元素实现气泡框&quot;&gt;&lt;a href=&quot;#用伪元素实现气泡框&quot; class=&quot;headerlink&quot; title=&quot;用伪元素实现气泡框&quot;&gt;&lt;/a&gt;用伪元素实现气泡框&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="Skill" scheme="https://heiliu.github.io/tags/Skill/"/>
    
  </entry>
  
  <entry>
    <title>单行文本换行与多行文本换行</title>
    <link href="https://heiliu.github.io/2019/10/23/text-overflow/"/>
    <id>https://heiliu.github.io/2019/10/23/text-overflow/</id>
    <published>2019-10-23T08:23:00.000Z</published>
    <updated>2019-10-23T08:24:05.434Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/entry/5aa1f4916fb9a028b92cbdcc" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/entry/5aa1f4916fb9a028b92cbdcc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Poratls --传送门</title>
    <link href="https://heiliu.github.io/2019/10/22/react_Portal/"/>
    <id>https://heiliu.github.io/2019/10/22/react_Portal/</id>
    <published>2019-10-22T09:50:00.000Z</published>
    <updated>2019-11-06T10:21:11.056Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中常常会需要对话框、下拉列表、悬浮窗等交互的组件，当在父组件中使用一个下拉列表的时候，父组件的大小是固定的、同时还有一些overflow: hidden;子组件想要完全展示就变得比较困难，或者不能完全展示、或者阴影被父组件overflow给hidden掉了，同时在用overflow去清除浮动的影响的时候也要考虑到副作用，当元素比较多或者内容比较大的时候会不会被截断的问题。这个当想让子元素的层级最高而且不用被父元素给截断的时候就需要一个容器或者元素能够脱离父组件，至少从视觉上就得脱离父组件的影响。  </p><p>Portals 是 react 16 官方提供的解决方案， 使得组件可以脱离父组件从而挂载在页面的任何地方。</p><p>在做组件层级的时候 应用的skill<br><a href="https://xuzpeng.github.io/2019/05/04/React%E4%BC%A0%E9%80%81%E9%97%A8-Portal/" target="_blank" rel="noopener">文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中常常会需要对话框、下拉列表、悬浮窗等交互的组件，当在父组件中使用一个下拉列表的时候，父组件的大小是固定的、同时还有一些overflow: hidden;子组件想要完全展示就变得比较困难，或者不能完全展示、或者阴影被父组件overflow给hidden掉了，同时在用o
      
    
    </summary>
    
    
      <category term="前端" scheme="https://heiliu.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>在 React 中使用 mobx 进行状态管理</title>
    <link href="https://heiliu.github.io/2019/10/14/mobx-react/"/>
    <id>https://heiliu.github.io/2019/10/14/mobx-react/</id>
    <published>2019-10-13T16:00:00.000Z</published>
    <updated>2019-12-10T00:51:30.805Z</updated>
    
    <content type="html"><![CDATA[<p>observable<br>inject<br>computed<br>action </p><p>autorun<br>RunInAction<br>Reaction </p><p>尽量使用箭头函数</p><p>调试</p><p>toJS 需要引入 =&gt; 不如直接 JSON.stringify()方便</p><p>不用使用数组索引或者任何将来可能会改变的值作为 key 。如果需要的话为你的对象生成 ids。</p><p><a href="https://cn.mobx.js.org/best/react-performance.html" target="_blank" rel="noopener">参考技巧</a></p><!-- 中文排序 --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [&#123;<span class="attr">name</span>:<span class="string">'武汉'</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">'北京'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'上海'</span>&#125;, &#123;<span class="attr">name</span>:<span class="string">'天津'</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> resultArray = array.sort(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">compareFunction</span>(<span class="params">param1, param2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param1.name.localeCompare(param2.name,<span class="string">"zh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="built_in">console</span>.log(resultArray);</span><br></pre></td></tr></table></figure><!-- computed 计算属性 --><p>根据现有的状态或其它计算值衍生出的值，响应式的产生一个可以被其它 observer 使用的值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;observable, computed&#125; <span class="keyword">from</span> <span class="string">"mobx"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderLine</span> </span>&#123;</span><br><span class="line">    @observable price = <span class="number">0</span>;</span><br><span class="line">    @observable amount = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(price) &#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// computed 不支持箭头函数的写法</span></span><br><span class="line">    @computed <span class="keyword">get</span> total() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.price * <span class="keyword">this</span>.amount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><!-- autorun --><p>想不产生一个新值，而达到一个效果，请使用 autorun。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用。</p><p>autorun 中的值必须要手动清理才行</p><!-- runInAction --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求底部的 table Plan 绑定数据</span></span><br><span class="line">@action fetchShopPlanList = (): <span class="function"><span class="params">ActionResponse</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [begin, end] = <span class="keyword">this</span>.dateRange;</span><br><span class="line">    <span class="keyword">return</span> http</span><br><span class="line">        .post(ApiBaseinfo_Admin_Restaurant_restaurantID_menuCalendarByDateRange, &#123;</span><br><span class="line">            <span class="string">':restaurantID'</span>: globalStore.currentShopID,</span><br><span class="line">            begin,</span><br><span class="line">            end,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">&#123; error, data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123; error &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            runInAction(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> &#123; menuCalendarList &#125; = data;</span><br><span class="line">                <span class="comment">// 遍历筛选绑定菜单项</span></span><br><span class="line">                <span class="keyword">this</span>.boundObj = menuCalendarList.reduce(<span class="function">(<span class="params">preObj, mealPlan</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; color, name, date &#125; = mealPlan;</span><br><span class="line">                    <span class="keyword">if</span> (color) &#123;</span><br><span class="line">                        preObj[<span class="string">`<span class="subst">$&#123;date&#125;</span>_<span class="subst">$&#123;name&#125;</span>`</span>] = color;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">return</span> preObj;</span><br><span class="line">                &#125;, &#123;&#125;);</span><br><span class="line">                <span class="comment">// 在一个请求的 action中直接去修改 state,可能会存在mobx 检测不到的情况，需要包裹 runInAction</span></span><br><span class="line">                <span class="keyword">this</span>.shopCalendarList = data.menuCalendarList;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123; data &#125;;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;observable&lt;br&gt;inject&lt;br&gt;computed&lt;br&gt;action &lt;/p&gt;
&lt;p&gt;autorun&lt;br&gt;RunInAction&lt;br&gt;Reaction &lt;/p&gt;
&lt;p&gt;尽量使用箭头函数&lt;/p&gt;
&lt;p&gt;调试&lt;/p&gt;
&lt;p&gt;toJS 需要引入 =&amp;gt; 不
      
    
    </summary>
    
      <category term="React" scheme="https://heiliu.github.io/categories/React/"/>
    
    
      <category term="React" scheme="https://heiliu.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heiliu.github.io/2019/10/13/ReactComponent/"/>
    <id>https://heiliu.github.io/2019/10/13/ReactComponent/</id>
    <published>2019-10-13T09:35:47.829Z</published>
    <updated>2019-11-07T10:36:31.788Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="title-react中的组件-Component、PureComponent、functionComponent"><a href="#title-react中的组件-Component、PureComponent、functionComponent" class="headerlink" title="title: react中的组件: Component、PureComponent、functionComponent"></a>title: react中的组件: Component、PureComponent、functionComponent</h2><h2 id="React-哲学"><a href="#React-哲学" class="headerlink" title="React 哲学"></a>React 哲学</h2><p>组合优于继承</p><h2 id="class-Component"><a href="#class-Component" class="headerlink" title="class Component"></a>class Component</h2><h2 id="function-Component"><a href="#function-Component" class="headerlink" title="function Component"></a>function Component</h2><h2 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h2><h2 id="组件库中组件的设计"><a href="#组件库中组件的设计" class="headerlink" title="组件库中组件的设计"></a>组件库中组件的设计</h2><p>stateLess<br>常用样式尽量少</p><!-- TODO -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h2 id=&quot;title-react中的组件-Component、PureComponent、functionComponent&quot;&gt;&lt;a href=&quot;#title-react中的组件-Component、PureComponent、functionComponent&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>classnames 的用法总结</title>
    <link href="https://heiliu.github.io/2019/10/13/classnames/"/>
    <id>https://heiliu.github.io/2019/10/13/classnames/</id>
    <published>2019-10-12T16:00:00.000Z</published>
    <updated>2019-11-07T15:25:35.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-和-Vue-class对比"><a href="#React-和-Vue-class对比" class="headerlink" title="React 和 Vue class对比"></a>React 和 Vue class对比</h2><p>在React项目开发中，类名的管理不像 Vue 那么方便;</p><p>如何为组件添加 CSS 的 class？<br>传递一个字符串作为 className 属性：</p><p>render() {<br>  return <span classname="menu navigation-menu">Menu</span><br>}<br>CSS 的 class 依赖组件的 props 或 state 的情况很常见：</p><p>render() {<br>  let className = ‘menu’;<br>  if (this.props.isActive) {<br>    className += ‘ menu-active’;<br>  }<br>  return <span classname="{className}">Menu</span><br>}</p><p>在官方的提示下推荐开发者使用 <a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">classnames</a> npm 包来管理自己的类名会方便很多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  'use strict'</span>;</span><br><span class="line">  <span class="comment">// =&gt;  Object.hasOwnProperty   用于判断某个成员是否在对象内</span></span><br><span class="line">  <span class="keyword">var</span> hasOwn = &#123;&#125;.hasOwnProperty;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">classNames</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="comment">// 存储 className 值</span></span><br><span class="line">    <span class="keyword">var</span> classes = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环实参， arguments就是实际调用函数传入的参数，类似数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">      <span class="comment">// 获取实参value</span></span><br><span class="line">      <span class="keyword">var</span> arg = <span class="built_in">arguments</span>[i];</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 跳过false条件 =&gt; false, null, undefined, NaN, 空, ...</span></span><br><span class="line">      <span class="keyword">if</span> (!arg) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断传入参数的类型</span></span><br><span class="line">      <span class="keyword">var</span> argType = <span class="keyword">typeof</span> arg;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果参数的类型是 string 或者 number</span></span><br><span class="line">      <span class="keyword">if</span> (argType === <span class="string">'string'</span> || argType === <span class="string">'number'</span>) &#123;</span><br><span class="line">        <span class="comment">// 直接追加到classes数组后面</span></span><br><span class="line">        classes.push(arg);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果参数是数组并且长度大于0</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arg) &amp;&amp; arg.length) &#123;</span><br><span class="line">        <span class="comment">// 调用自身函数，利用apply可以将数组转成字符串</span></span><br><span class="line">        <span class="keyword">var</span> inner = classNames.apply(<span class="literal">null</span>, arg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 现在是一个字符串，隐士判断布尔值</span></span><br><span class="line">        <span class="keyword">if</span> (inner) &#123;</span><br><span class="line">          <span class="comment">// 追加到数组后面</span></span><br><span class="line">          classes.push(inner);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// 如果传入的参数是对象</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argType === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="comment">// 对object进行遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> arg) &#123;</span><br><span class="line">          <span class="comment">// 判断key是否存在arg对象内并且key的值隐士转换为true</span></span><br><span class="line">          <span class="keyword">if</span> (hasOwn.call(arg, key) &amp;&amp; arg[key]) &#123;</span><br><span class="line">            <span class="comment">// 将值追加到classes数组后面</span></span><br><span class="line">            classes.push(key);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将数组连接成字符串以空格拼接  =&gt; a b c</span></span><br><span class="line">    <span class="keyword">return</span> classes.join(<span class="string">' '</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果是node.js环境运行</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">module</span>.exports) &#123;</span><br><span class="line">    classNames.default = classNames;</span><br><span class="line">    <span class="built_in">module</span>.exports = classNames;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果用的requirejs模块管理 AMD</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> define.amd === <span class="string">'object'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">    define(<span class="string">'classnames'</span>, [], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> classNames;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 否则运行于浏览器环境</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.classNames = classNames;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><!-- TODO --><p><a href="https://github.com/JedWatson/classnames" target="_blank" rel="noopener">classnames github库</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-和-Vue-class对比&quot;&gt;&lt;a href=&quot;#React-和-Vue-class对比&quot; class=&quot;headerlink&quot; title=&quot;React 和 Vue class对比&quot;&gt;&lt;/a&gt;React 和 Vue class对比&lt;/h2&gt;&lt;p&gt;在R
      
    
    </summary>
    
      <category term="NPM" scheme="https://heiliu.github.io/categories/NPM/"/>
    
    
  </entry>
  
  <entry>
    <title>VSCode 快捷键(持续更新)</title>
    <link href="https://heiliu.github.io/2019/10/13/VsCodeShortCuts/"/>
    <id>https://heiliu.github.io/2019/10/13/VsCodeShortCuts/</id>
    <published>2019-10-12T16:00:00.000Z</published>
    <updated>2019-11-06T11:03:40.294Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文档编辑中键盘快捷方式"><a href="#文档编辑中键盘快捷方式" class="headerlink" title="文档编辑中键盘快捷方式"></a>文档编辑中键盘快捷方式</h1><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><ul><li>快速移动光标（按单词跳: <strong>option <- -></-></strong> </li><li>行首行尾移动光标 : <strong>command <- -></-></strong></li><li>移动到文件头尾: <strong>commad <- -></-></strong> 上下方向键</li></ul><h2 id="选中"><a href="#选中" class="headerlink" title="选中"></a>选中</h2><ul><li>选中操作: <strong>shift <- -></-></strong> 方向键操作选中方向 </li><li>选中光标所在单词: <strong>command D</strong></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li>搜索时切换搜索结果: <strong>shift Enter</strong> </li><li>文件相对路径: shift command H 原shortCut =&gt; 自定义 <strong>command H</strong> </li><li>新建未命名文件: command N  </li><li>搜索光标所在单词: command E </li><li>选中所在的代码块(select Bracket)，对花括号的代码块较友好: <strong>option command B</strong> </li><li>切换tab: <strong>option commmad <- -></-></strong> </li><li>删除整个单词: <strong>option backspace</strong></li><li>向上下复制整行: <strong>option shift <- -></-></strong> 上下方向键</li><li>找到当前文件所有与选中相同的文档 达到批量修改的目的(change all ocurrences): <strong>shift command I</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文档编辑中键盘快捷方式&quot;&gt;&lt;a href=&quot;#文档编辑中键盘快捷方式&quot; class=&quot;headerlink&quot; title=&quot;文档编辑中键盘快捷方式&quot;&gt;&lt;/a&gt;文档编辑中键盘快捷方式&lt;/h1&gt;&lt;h2 id=&quot;光标移动&quot;&gt;&lt;a href=&quot;#光标移动&quot; class=&quot;
      
    
    </summary>
    
      <category term="笔记" scheme="https://heiliu.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Note" scheme="https://heiliu.github.io/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://heiliu.github.io/2019/08/29/NginxGetStart/"/>
    <id>https://heiliu.github.io/2019/08/29/NginxGetStart/</id>
    <published>2019-08-29T10:14:41.350Z</published>
    <updated>2019-08-29T10:14:55.038Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.javaboy.org/2019/0605/nginx-guide.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.javaboy.org/2019/0605/nginx-guide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参考链接&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React-router V4</title>
    <link href="https://heiliu.github.io/2019/08/21/reactRouter/"/>
    <id>https://heiliu.github.io/2019/08/21/reactRouter/</id>
    <published>2019-08-20T16:00:00.000Z</published>
    <updated>2019-11-06T10:21:06.801Z</updated>
    
    <content type="html"><![CDATA[<p>React 创建的单页应用中、通过路由来控制页面间的跳转，常用的就是 react-router、react-router-dom</p><h1 id="React-Router中有三类组件"><a href="#React-Router中有三类组件" class="headerlink" title="React Router中有三类组件"></a>React Router中有三类组件</h1><ul><li>路由组件 BrowserRouter, HashRouter  </li><li>路由匹配组件 Route, Switch  </li><li>导航、链接组件 Link</li></ul><blockquote><p>基于 React Router 的 web 应用，根组件应该是一个 router 组件（BrowserRouter，HashRouter ）。 项目中，react-router-dom 提供了和两种路由。两种路由都会创建一个 history 对象。如果我们的应用有服务器响应 web 的请求，我们通常使用<browserrouter>组件; 如果使用静态文件服务器，则我们应该使用<hashrouter>组件  通常都是使用 <browserrouter></browserrouter></hashrouter></browserrouter></p></blockquote><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p>Link 组件最终会渲染为 HTML 标签 <a>，它的 to、query、hash 属性会被组合在一起并渲染为 href 属性。虽然 Link 被渲染为超链接，但在内部实现上使用脚本拦截了浏览器的默认行为，然后调用了history.pushState 方法</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;React 创建的单页应用中、通过路由来控制页面间的跳转，常用的就是 react-router、react-router-dom&lt;/p&gt;
&lt;h1 id=&quot;React-Router中有三类组件&quot;&gt;&lt;a href=&quot;#React-Router中有三类组件&quot; class=&quot;hea
      
    
    </summary>
    
      <category term="React" scheme="https://heiliu.github.io/categories/React/"/>
    
    
      <category term="React-router" scheme="https://heiliu.github.io/tags/React-router/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 相关</title>
    <link href="https://heiliu.github.io/2019/08/15/webpack/"/>
    <id>https://heiliu.github.io/2019/08/15/webpack/</id>
    <published>2019-08-15T09:37:21.189Z</published>
    <updated>2019-11-06T03:37:30.502Z</updated>
    
    <content type="html"><![CDATA[<h1 id="及时补"><a href="#及时补" class="headerlink" title="及时补"></a>及时补</h1><p>一篇篇都是欠下的债</p><p><a href="https://juejin.im/post/5cea1e1ae51d4510664d1652" target="_blank" rel="noopener">参考链接</a><br><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">官方文档传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;及时补&quot;&gt;&lt;a href=&quot;#及时补&quot; class=&quot;headerlink&quot; title=&quot;及时补&quot;&gt;&lt;/a&gt;及时补&lt;/h1&gt;&lt;p&gt;一篇篇都是欠下的债&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5cea1e1ae51d45106
      
    
    </summary>
    
      <category term="前端" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webPack" scheme="https://heiliu.github.io/categories/%E5%89%8D%E7%AB%AF/webPack/"/>
    
    
      <category term="WebPack" scheme="https://heiliu.github.io/tags/WebPack/"/>
    
  </entry>
  
  <entry>
    <title>设计模式学习与整理</title>
    <link href="https://heiliu.github.io/2019/08/15/DesignPatterns/"/>
    <id>https://heiliu.github.io/2019/08/15/DesignPatterns/</id>
    <published>2019-08-15T06:22:55.389Z</published>
    <updated>2019-11-06T11:15:53.899Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://heiliu.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Note" scheme="https://heiliu.github.io/tags/Note/"/>
    
      <category term="设计模式" scheme="https://heiliu.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Skill" scheme="https://heiliu.github.io/tags/Skill/"/>
    
  </entry>
  
</feed>
