<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeiLiu</title>
  
  <subtitle>有一句Hello World想要对你说</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-09T15:33:46.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘江龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>让div在屏幕上居中（水平居中+垂直居中）的方法总结</title>
    <link href="http://yoursite.com/2018/05/09/cssCenter/"/>
    <id>http://yoursite.com/2018/05/09/cssCenter/</id>
    <published>2018-05-09T15:33:46.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>html代码如下：</p><pre><code class="html"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"book"</span>&gt;</span>        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"front-cover"</span>&gt;</span>        <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></code></pre></li><li><p>Css居中方法 （敲黑板）重点  </p><ul><li><p>首先将元素设置成为<code>绝对定位</code>，然后<code>距顶部和左各50%</code>，此时的元素还不是居中的，因此需要<code>通过一定的偏移</code>将其移到理想位置，两种方法的<code>主要思想</code>都是一样的，第一种通过margin-left和margin-top<code>移动元素自身宽高的一半</code>，另一种通过<code>css3</code>的属性transform的<code>translate方法</code>平移元素自身宽高的一半， 代码展示如下：  </p><pre><code class="css"><span class="selector-tag">body</span> {  <span class="attribute">color</span>: <span class="number">#ffffff</span>;  <span class="attribute">background</span>: <span class="number">#444444</span>;}<span class="selector-class">.book</span> {  <span class="attribute">width</span>: <span class="number">300px</span>;  <span class="attribute">height</span>: <span class="number">300px</span>;  <span class="attribute">position</span>: absolute;  <span class="attribute">top</span>: <span class="number">50%</span>;  <span class="attribute">left</span>: <span class="number">50%</span>;  <span class="comment">/* 第一种 */</span>  <span class="comment">/* 兼容性 未使用css3, ie678 */</span>  <span class="comment">/* margin-left: -150px; */</span>  <span class="comment">/* margin-top: -150px; */</span>  <span class="comment">/*第二种*/</span>  <span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(-50%, -50%);  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);}</code></pre><p>两种方法第一种的兼容性更加的好一些，因为其中没有使用Css3的属性 对于ie678的兼容比较友好</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;html代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span 
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Css" scheme="http://yoursite.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>javascript函数</title>
    <link href="http://yoursite.com/2018/05/09/function_note/"/>
    <id>http://yoursite.com/2018/05/09/function_note/</id>
    <published>2018-05-09T15:33:46.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><p>函数用于指定对象的行为，在其中包含一组语句。用于代码复用、信息隐藏、和组合调用。  </p><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>JavaScript 中的函数就是对象。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数对象在创建时会附加两个隐藏属性：<code>函数的上下文</code>和<code>实现函数行为的代码</code>。</p><p>函数对象在创建时也随配有一个<code>prototype</code>属性。它的值是一个拥有constructor属性且值即为该函数对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数的与众不同之处在于可以被调用。  </span></span><br><span class="line"><span class="string">### 函数字面量  </span></span><br><span class="line"><span class="string">函数对象通过函数字面量来创建。</span></span><br><span class="line"><span class="string">函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">### 调用  </span></span><br><span class="line"><span class="string">调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：`</span><span class="keyword">this</span><span class="string">`和`</span><span class="built_in">arguments</span><span class="string">`。参数this在面向对象编程中非常重要，它的值取决于调用的模式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为undefined。  </span></span><br><span class="line"><span class="string">- 方法调用模式  </span></span><br><span class="line"><span class="string">    当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，`</span><span class="keyword">this</span>被绑定到该对象<span class="string">`,通过this可以对该对象的属性和方法进行调用和操作。  </span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>js</span><br><span class="line">    <span class="keyword">var</span> myObject = &#123;</span><br><span class="line">        text: hello,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.text + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    myObject.say(world);</span><br></pre></td></tr></table></figure></p><ul><li>函数调用模式<br>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。<br>此时this被绑定到全局对象。即时是内部函数也会将this绑定到全局对象。this的指向问题 作用域不一样 this的指向就不一样,可以在函数内创建一个属性并赋值为this来解决这个问题,一般通过<code>var that = this</code>;  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.value = add(that.value, that.value)</span><br><span class="line">    &#125;</span><br><span class="line">    helper()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double()</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//8</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    attachEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// attachEvent函数的作用域</span></span><br><span class="line">    <span class="comment">// js 里面this总会指向什么</span></span><br><span class="line">    <span class="comment">// 对象的方法被执行时 this指向对象</span></span><br><span class="line">    <span class="comment">// console.log(this);</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.staticElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个函数被执行时，并不是对象的方法，而是匿名函数，作为事件处理函数来执行，this会指向事件发生元素</span></span><br><span class="line">        <span class="comment">// this的指向跟函数的调用方式有关</span></span><br><span class="line">        <span class="comment">// this的指向问题 作用域不一样 this的指向就不一样</span></span><br><span class="line">        <span class="comment">// 作用域 事件的回调函数</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// alert(that.value);</span></span><br><span class="line">        that.convertToEdit();</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.filedElement.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在事件发生的一刹那 会产生一个临时事件对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(evt);</span><br><span class="line">        <span class="keyword">if</span> (evt.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">            that.staticElement.innerHTML = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="built_in">console</span>.log(that.staticElement.innerHTML);</span><br><span class="line">            that.convertToText();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造器调用模式<br>JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。<br>如果在一个函数前面带上new来调用，那么背地里将会创建一个连接到该函数的prototype成员的新对象，同时this会被绑定到那个新对象上。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造器函数</span></span><br><span class="line"><span class="keyword">var</span> Quo = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Que的所有实例提供一个公共方法</span></span><br><span class="line">Quo.prototype.getStatus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="keyword">new</span> Quo(<span class="string">'confused'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myQuo.getStatus()) <span class="comment">//confused</span></span><br></pre></td></tr></table></figure></li><li><p>Apply 调用模式<br><code>apply</code>方法让我们构建一个参数数组传递给调用函数。他也允许我们选择<code>this</code>的值。apply方法接受两个参数，第一个是要绑定给<code>this</code>的值，第二个是参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">        <span class="keyword">var</span> sum = add.apply(<span class="literal">null</span>, arr)</span><br><span class="line">        <span class="built_in">console</span>.log(sum) <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> statusObject = &#123;</span><br><span class="line">            status: <span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> status = Quo.prototype.getStatus.apply(statusObject)</span><br><span class="line">        <span class="built_in">console</span>.log(status) <span class="comment">//hello</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 参数  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当函数被调用时，会得到一个`</span><span class="built_in">arguments</span><span class="string">`数组。通过此参数可以访问所有它被调用时传递给它的`</span>参数列表<span class="string">`，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js    </span><br><span class="line"> <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> i, sum = <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">         sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)<span class="comment">//45</span></span><br></pre></td></tr></table></figure></li></ul><p>因语言的设计错误，<code>arguments</code>并不是一个真正的数组。是一个“类似数组”的对象。有<code>length</code>属性，但没有任何数组的方法。</p><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>函数执行时遇到关闭函数体的<code>}</code>时结束。然后把控制权交还给调用该函数的程序。</p><p><code>return</code>可以使函数提前返回，当return语句执行时函数立即返回不在执行余下的语句。</p><p>函数总是会返回一个值，若没有指定，则返回<code>undefined</code>。</p><p>若函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象的时候，则返回<code>this</code>（该新对象）。  </p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了<code>this</code>和<code>arguments</code>）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quo = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get_status: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myQuo = quo(<span class="string">'amazed'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myQuo.get_status()) <span class="comment">//amazed</span></span><br></pre></td></tr></table></figure></p><p>狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。<code>status</code>访问的就说<code>对象中的status</code>属性本身,通过闭包可以让一个局部变量驻留在内存中</p><p>避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前i值的函数，这样就不会导致混淆了。  </p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将一个函数作为参数，一旦接收到响应，再调用这个函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> fs.readFile(<span class="string">'demo/02.js'</span>,<span class="string">'utf8'</span>,(error,data)=&gt;&#123;</span><br><span class="line"> <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line"> <span class="comment">//在异步中的错误不能被捕获 通过throw error进行错误的捕获</span></span><br><span class="line"> <span class="built_in">console</span>.log(data) &gt;&gt;a.txt;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>可以用函数和闭包构造模块。模块是一个提供接口却隐藏与实现的函数或者对象</p><p>模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberCal = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> half = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tribble = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        half: half,</span><br><span class="line">        double: double,</span><br><span class="line">        tribble: tribble</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">5</span>)) <span class="comment">//2.5</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">6</span>)) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.double(<span class="number">7</span>)) <span class="comment">//14</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.tribble(<span class="number">7</span>)) <span class="comment">//21</span></span><br></pre></td></tr></table></figure></p><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>如果让方法返回this而不是默认的undefined，就可以启用级联，即连续调用。</p><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>函数可以将先前操作的结果记录在某个对象或者数组里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;函数用于指定对象的行为，在其中包含一组语句。用于代码复用、信息隐藏、和组合调用。  &lt;/p&gt;
&lt;h3 id=&quot;函数对象&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="js语言精粹" scheme="http://yoursite.com/categories/js%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在hexo中安装next主题</title>
    <link href="http://yoursite.com/2018/05/09/next_install/"/>
    <id>http://yoursite.com/2018/05/09/next_install/</id>
    <published>2018-05-09T15:33:46.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<hr><pre><code>倒腾了一天半终于自己实现了一个还不错的博客，在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。如果没有搭建好自己的hexo+git pages博客界面可以看我另外一篇经验分享**说明**：在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo本身的配置；另一份位于主题next目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。  </code></pre><hr><ul><li>下载主题 <ul><li>下载方式：</li></ul></li></ul><pre><code>1.在theme文件夹中将主题包克隆到本地，并将文件名`hexo-theme-next`改成`next`          git clone https://github.com/iissnan/hexo-theme-next themes/next    2.前往Next[发布页面][1]将`sourcecode`下载到本地，解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（`hexo-theme-next-0.4.0`）更改为 `next`。</code></pre><ul><li><p>启用Next  </p><pre><code>当 克隆/下载 完成后，打开 站点配置文件， 找到 `theme` 字段，并将其值更改为`next`。</code></pre></li><li><p>验证主题是否应用</p><pre><code>1. NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 最好使用 `hexo clean` 来清除 Hexo 的缓存。2. 执行`hexo generate` 生成博客3. 执行`hexo server`启用本地服务器 在本地可以直接查看修改以后的效果     &gt;`INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to`       使用浏览器进行访问http://0.0.0.0:4000/</code></pre></li></ul><ul><li>修改主题样式scheme<br> Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。</li></ul><blockquote><p> #Schemes</p></blockquote><pre><code>#scheme: Mistscheme: Muse#scheme: Pisces#scheme: Gemini</code></pre><ul><li>其他基本配置<br> 打开<code>站点配置文件</code> 可以像我一样进行基本设置 <code>每个冒号后面必须与内容用空格分割</code></li></ul><blockquote><p> #Site<br>title: HeiLiu //站点title<br>subtitle: 有一句Hello World想要对你说<br>description: 程序员 大学本科<br>keywords:<br>author: 刘江龙<br>language: zh-Hans   //设置语言<br>timezone: Asia/Shanghai  //时间</p><p> #Deployment</p></blockquote><h2 id="Docs-https-hexo-io-docs-deployment-html"><a href="#Docs-https-hexo-io-docs-deployment-html" class="headerlink" title="Docs: https://hexo.io/docs/deployment.html"></a>Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">https://hexo.io/docs/deployment.html</a></h2><p>deploy:<br>  type: git<br>  repo: <a href="https://github.com/HeiLiu/HeiLiu.github.io.git" target="_blank" rel="noopener">https://github.com/HeiLiu/HeiLiu.github.io.git</a><br>  branch: master</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;pre&gt;&lt;code&gt;倒腾了一天半终于自己实现了一个还不错的博客，在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。如果没有搭建好自己的hexo+git pages博客界面可以看我另外一篇经验分享

**说明**：在 Hexo 中
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="倒腾" scheme="http://yoursite.com/tags/%E5%80%92%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2018/05/09/URL/"/>
    <id>http://yoursite.com/2018/05/09/URL/</id>
    <published>2018-05-09T15:33:46.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 输入URL之后<br>date: 2018-05-03<br>tags: ‘’</p><h2 id="categories-前端"><a href="#categories-前端" class="headerlink" title="categories: 前端"></a>categories: <code>前端</code></h2><h3 id="有的研究"><a href="#有的研究" class="headerlink" title="有的研究"></a>有的研究</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 输入URL之后&lt;br&gt;date: 2018-05-03&lt;br&gt;tags: ‘’&lt;/p&gt;
&lt;h2 id=&quot;categories-前端&quot;&gt;&lt;a href=&quot;#categories-前端&quot; class=&quot;headerlink&quot; title=&quot;categor
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>stylus之变量与mixin</title>
    <link href="http://yoursite.com/2018/05/09/mixin/"/>
    <id>http://yoursite.com/2018/05/09/mixin/</id>
    <published>2018-05-09T15:33:46.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="混合书写-Mixins"><a href="#混合书写-Mixins" class="headerlink" title="混合书写(Mixins)"></a>混合书写(Mixins)</h2><hr><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><p>在<code>stylus</code>中 可以将常用的样式像表达式中变量赋值一样保存给一个变量、如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*进行变量的声明*/</span></span><br><span class="line">bg_color = #123456;</span><br><span class="line">box_size = 100px;</span><br><span class="line"><span class="comment">/* 使用 */</span></span><br><span class="line"><span class="selector-class">.box</span></span><br><span class="line">    <span class="selector-tag">background-color</span> <span class="selector-tag">bg_color</span></span><br><span class="line">    <span class="selector-tag">width</span> <span class="selector-tag">box_size</span></span><br><span class="line">    <span class="selector-tag">height</span> <span class="selector-tag">box_size</span></span><br></pre></td></tr></table></figure><p>  编译后：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">   <span class="attribute">background-color</span>: <span class="number">#123456</span>;</span><br><span class="line">   <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>属性查找<br>Stylus有另外一个很酷的独特功能，不需要分配值给变量就可以定义引用属性。下面是个很好的例子，元素水平垂直居中对齐（典型的方法是使用百分比和margin负值），如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#logo</span></span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></span><br><span class="line">    <span class="selector-tag">top</span>: 50%</span><br><span class="line">    <span class="selector-tag">left</span>: 50%</span><br><span class="line">    width: w = 150px</span><br><span class="line">    height: h = 80px</span><br><span class="line">    margin-left: -(w / 2)</span><br><span class="line">    margin-top: -(h / 2)</span><br></pre></td></tr></table></figure></li></ul><p>在<code>stylus</code>中可以不使用这里的变量w和h, 而是简单地前置<code>@</code>字符在属性名前来访问该属性名对应的值：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#logo</span></span><br><span class="line">    <span class="selector-tag">position</span>: <span class="selector-tag">absolute</span></span><br><span class="line">    <span class="selector-tag">top</span>: 50%</span><br><span class="line">    <span class="selector-tag">left</span>: 50%</span><br><span class="line">    <span class="selector-tag">width</span>: 150<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">height</span>: 80<span class="selector-tag">px</span></span><br><span class="line">    <span class="selector-tag">margin-left</span>: <span class="selector-tag">-</span>(@<span class="keyword">width</span> / <span class="number">2</span>)</span><br><span class="line">    margin-top: -(@height / <span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><h3 id="混合书写"><a href="#混合书写" class="headerlink" title="混合书写"></a>混合书写</h3><ul><li>混合书写和函数定义方法一致，但是应用却大相径庭。</li></ul><p>例如，在书写<code>Css3</code>样式时我们经常要进行兼容性处理，需要在属性前加上相应的前缀，下面有定义的border-radius(n)方法，其却作为一个mixin（如，作为状态调用，而非表达式）调用。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    bg_color = #123456;</span><br><span class="line">    box_size = 100px;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*定义mixin*/</span></span><br><span class="line">    <span class="selector-tag">border-radius</span>(<span class="selector-tag">n</span>)</span><br><span class="line">        <span class="selector-tag">-webkit-border-radius</span> <span class="selector-tag">n</span></span><br><span class="line">        <span class="selector-tag">-moz-border-radius</span> <span class="selector-tag">n</span></span><br><span class="line">        <span class="selector-tag">-ms-border-radius</span> <span class="selector-tag">n</span></span><br><span class="line">        <span class="selector-tag">-o-border-radius</span> <span class="selector-tag">n</span></span><br><span class="line">        <span class="selector-tag">border-radius</span> <span class="selector-tag">n</span></span><br><span class="line">    <span class="selector-class">.box</span></span><br><span class="line">        <span class="selector-tag">background-color</span> <span class="selector-tag">bg_color</span></span><br><span class="line">        <span class="selector-tag">width</span> <span class="selector-tag">box_size</span></span><br><span class="line">        <span class="selector-tag">height</span> <span class="selector-tag">box_size</span></span><br><span class="line">        <span class="selector-tag">border-radius</span>(5<span class="selector-tag">px</span>)</span><br><span class="line">```  </span><br><span class="line">进一步，我们可以利用<span class="selector-tag">arguments</span>这个局部变量，传递可以包含多值的表达式,这样就可以給属性传递多个值。  </span><br><span class="line">```<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-tag">border-radius</span>()</span><br><span class="line">        <span class="selector-tag">-webkit-border-radius</span> <span class="selector-tag">arguments</span></span><br><span class="line">        <span class="selector-tag">-moz-border-radius</span> <span class="selector-tag">arguments</span></span><br><span class="line">        <span class="selector-tag">-ms-border-radius</span> <span class="selector-tag">arguments</span></span><br><span class="line">        <span class="selector-tag">-o-border-radius</span> <span class="selector-tag">arguments</span></span><br><span class="line">        <span class="selector-tag">border-radius</span> <span class="selector-tag">arguments</span></span><br></pre></td></tr></table></figure></p><p><code>Stylus</code>支持通过使用{}字符包围表达式来插入值，其会变成标识符的一部分。例如，-webkit-{‘border’ + ‘-radius’}等同于<code>-webkit-border-radius</code>. </p><p>再进一步，在stylus中我们还可以对border-radius再做进一步的处理 类似与js中的函数封装 ，如下(这样对于任何需要做兼容性处理的属性 我们只需要调用两次mixin出入所需参数，大大的简化了一下琐碎代码工作):<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-tag">vendor</span>(<span class="selector-tag">prop</span>,<span class="selector-tag">args</span>)</span><br><span class="line">    -webkit-&#123;prop&#125; args</span><br><span class="line">    -moz-&#123;prop&#125; args</span><br><span class="line">    -ms-&#123;prop&#125; args</span><br><span class="line">    -o-&#123;prop&#125; args</span><br><span class="line">    &#123;prop&#125; args</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">border-radius</span>(<span class="selector-tag">n</span>)</span><br><span class="line">    vendor('border-radius',arguments)</span><br><span class="line"><span class="selector-tag">box-shadow</span>(<span class="selector-tag">n</span>)</span><br><span class="line">    vendor('boa-shadow',arguments)</span><br><span class="line"><span class="selector-class">.box</span></span><br><span class="line">    <span class="selector-tag">background-color</span> <span class="selector-tag">bg_color</span></span><br><span class="line">    <span class="selector-tag">width</span> <span class="selector-tag">box_size</span></span><br><span class="line">    <span class="selector-tag">height</span> <span class="selector-tag">box_size</span></span><br><span class="line">    <span class="selector-tag">border-radius</span>(5<span class="selector-tag">px</span>)</span><br></pre></td></tr></table></figure></p><p> 编译后：<br> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#123456</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-moz-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-ms-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-o-border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</span><br><span class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</span><br><span class="line">  <span class="attribute">-ms-box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</span><br><span class="line">  <span class="attribute">-o-box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">10px</span> <span class="built_in">rgba</span>(0,0,0,0.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;混合书写-Mixins&quot;&gt;&lt;a href=&quot;#混合书写-Mixins&quot; class=&quot;headerlink&quot; title=&quot;混合书写(Mixins)&quot;&gt;&lt;/a&gt;混合书写(Mixins)&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; clas
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Css" scheme="http://yoursite.com/tags/Css/"/>
    
  </entry>
  
  <entry>
    <title>Css3属性</title>
    <link href="http://yoursite.com/2018/05/04/Css3/"/>
    <id>http://yoursite.com/2018/05/04/Css3/</id>
    <published>2018-05-03T16:00:00.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="text-shadow属性"><a href="#text-shadow属性" class="headerlink" title="text-shadow属性"></a>text-shadow属性</h3><p><strong>介绍:</strong></p><pre><code>`text-shadow`属性可以给页面上的文字增添阴影效果，`text-shadow`在Css2.1的时候是    被删除了的一个属性，但是呢在3.0的Css中又恢复了使用 </code></pre><ul><li><p>使用方法   </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="selector-tag">text-shadow</span> : <span class="selector-tag">length</span> <span class="selector-tag">length</span> <span class="selector-tag">length</span> <span class="selector-tag">color</span></span><br></pre></td></tr></table></figure><p> <br>注：前两个参数在使用的时候必须给定</p><ul><li>第一个<code>length</code>表示阴影离开文字横方向的距离  </li><li>第二个<code>length</code>表示阴影离开文字纵方向的距离</li><li>第二个<code>length</code>表示阴影模糊半径 即模糊范围</li><li><p><code>color</code> 表示阴影颜色 可以放在三个<code>length</code>之前 也可以放在之后 如果不给值 则使用元素默认<code>color</code>  </p><p>$ 指定多个阴影： 每个阴影用逗号隔开 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span> : 15<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#000</span>,30<span class="selector-tag">px</span>,30<span class="selector-tag">px</span>,5<span class="selector-tag">px</span> <span class="selector-id">#f60</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="background-size属性"><a href="#background-size属性" class="headerlink" title="background-size属性"></a>background-size属性</h3><p><strong>介绍:</strong><br>        在Css3中可以使用<code>background-size</code>来指定背景图像的尺寸  </p><ul><li><p>使用方法 </p><pre><code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-size: auto || length || percentage || cover || contain</span><br></pre></td></tr></table></figure></code></pre><ul><li><code>auto</code>: 默认值 保持背景图片的原始宽高比  </li><li><code>length</code>: 设置背景图片的宽度和高度，如果只设置一个值，则第二个值会被设置为<code>auto</code> 按宽高比进行放大缩小  </li><li><code>percentage</code>: 以父元素的百分比来设置宽度和高度，如果只设置一个值 同上  </li><li><code>cover</code>: 此值是将图片放大，以适合铺满整个容器，这个主要用在当图片小于容器又无法使用background-repeat来实现，就可以采用<code>cover</code>将背景图片放大到适合容器的大小，但是会使图片失真  </li><li><code>contain</code>: 与<code>cover</code>相反，将背景图片缩小以适合铺满整个容器，这个主要用在当背景图片大于元素容器时，而又需要将背景图片全部显示出来，就可以用<code>contain</code>将图片缩小到适合容器的大小，这种方法同样会使图片失真  </li></ul></li><li><p>在一个元素中显示多个背景图片<br><strong>介绍:</strong><br>在Css3一个元素可以显示多个背景图像，还可以将多个背景图像进行重叠显示，这样对背景中所用素材调整变得更加容易。<br><strong>使用方法</strong>   </p><blockquote><p>background-image:url(1.png),url(2,png),url(3.png);</p></blockquote><pre><code>图层的排序方法: 浏览器中显示时叠放的顺序是从上往下指定的，第一个图片放在最上面，最后指定的放在下面</code></pre><h3 id="Css3的变形功能"><a href="#Css3的变形功能" class="headerlink" title="Css3的变形功能"></a>Css3的变形功能</h3><h4 id="transform属性"><a href="#transform属性" class="headerlink" title="transform属性"></a>transform属性</h4><p><strong>介绍:</strong><br> 在Css3中可以利用<code>transform</code>属性来实现文字或图像的旋转、缩放、倾斜、和移动。但是需要做兼容性处理，如下  </p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">rotateX</span>(60<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">-moz-transform</span>: <span class="selector-tag">rotateX</span>(60<span class="selector-tag">deg</span>);</span><br><span class="line"><span class="selector-tag">-ms-transform</span>: <span class="selector-tag">rotateX</span>(60<span class="selector-tag">deg</span>); <span class="comment">/*IE9*/</span></span><br><span class="line"><span class="selector-tag">-o-transform</span>: <span class="selector-tag">rotateX</span>(60<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure></li><li><p>rotate(旋转)：</p><ul><li><p><code>rotate(60deg)</code>;顺时针旋转 <code>deg</code>是Css3中的角度单位</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-transform</span>: <span class="selector-tag">rotateX</span>(60<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure></li><li><p>rotateX(angle) rotateY(angle) rotateZ(angle)<br>  绕对应的轴进行3D旋转</p></li><li><code>rotate3D(X,Y,Z,deg)</code>    定义 3D 旋转</li></ul></li><li>scale(缩放)：<br><code>transform:scale(值)</code> 值所指的是缩(小)放(大)倍率 如果值为负数并没有效果 纯属无聊<ul><li><code>scale(x,y)</code> 使元素在x轴 y轴方向同时缩放</li><li><code>scaleX(.5)</code> 你应该懂得</li><li><code>scaleY(.5)</code> 同上</li></ul></li><li>skew(倾斜)<br><code>transform:skew(deg)</code> 倾斜角度<ul><li><code>skew(x,y)</code> 元素在水平和垂直方向上同时倾斜 只有一个参数时，只在水平方向上倾斜  </li><li><code>skewX(x)</code> 元素仅在水平方向倾斜  </li><li><code>skewY(y)</code> 元素在垂直方向倾斜  </li></ul></li><li><code>translate</code>(值) 指定移动的距离  负值即反方向移动<ul><li><code>translate(x,y)</code>;在x轴和y轴同时移动，只有一个参数时，仅在水平方向移动;  </li><li><code>translateX(x)</code>;x轴方向移动<br>-<code>translateY(y)</code>;y轴方向移动</li></ul></li><li>transform-origin 改变元素基点<br> 属性使用：transform-origin:bottom;<br> 各个基点参考如图：<br> <img src="https://github.com/HeiLiu/markdown_source/blob/master/images/transform-origin.jpg" alt="transform-origin"></li><li>对一个元素使用多种变形的方法：<br> transform：方法一，方法二，方法三..; <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/*同样也需要做兼容性处理*/</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(50<span class="selector-tag">px</span>),<span class="selector-tag">rotate</span>(60<span class="selector-tag">deg</span>),<span class="selector-tag">scale</span>(2);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Css3的动画功能"><a href="#Css3的动画功能" class="headerlink" title="Css3的动画功能"></a>Css3的动画功能</h3><p><a href="https://github.com/HeiLiu/markdown_source/blob/master/demo/fzdh.html" target="_blank" rel="noopener">demo</a></p><ul><li><p><code>transition</code>  支持从一个属性平滑过渡到另外一个属性  </p><ul><li><p>语法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>: <span class="selector-tag">property</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span>;</span><br></pre></td></tr></table></figure><ul><li><p><code>transition</code> 主要包含四个属性值:  </p><ul><li><p>执行变换的属性: <code>transition-property</code>,属性规定应用过渡效果的CSS属性的名称。(当指定的CSS属性改变时，过渡效果将开始)值有三个类型:</p><pre><code>A、`none` 没有属性会获得过渡效果。  B、`all`所有属性都将获得过渡效果。  C、`property`定义应用过渡效果的CSS 属性名称列表，列表以逗号分隔。</code></pre></li><li><p>变换延续的时间: <code>transition-duration</code>规定完成过渡效果需妻花费的时间(以秒或毫秒计》，默认值0没有效果</p></li><li>在延续时间段，变换的速率变化transition-timing-function<br>值:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A 、ease:  (逐渐变慢) 默认值，ease函数等同于贝塞尔曲线(0.25,0.1,0.25,1.0).  </span><br><span class="line">B、linear:  (匀速)，linear 函数等同于贝塞尔曲线(0.0,0.0,1.0,1.0).  </span><br><span class="line">C、ease-in: (加速)，ease-in 函数等同于贝塞尔曲线(0.42,0,1.0,1.0).  </span><br><span class="line">D、ease-out:  (减速)，ease-out 函数等同于贝塞尔曲线(0,0,0.58,1.0).  </span><br><span class="line">E 、ease-in-out :  (加速然后减速)，ease-in-out 函数等同于贝塞尔曲线(0.42,0,0.58,1.0)  </span><br><span class="line">F、cubic-bezier(n,n,n,n)在cubic-bezier 函数中定义自己的值。可能的值是0 至1之间的数值。</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul></li><li><p>animation  支持通过关键帧的指定来在页面上产生更复杂的动画效果<br><strong>用 transition和Animations的区别 :</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`transition`和`Animations`的区别在于，`transition`只能通过指定属性的开始值与结束值，然后通过两属性值之间进行垂滑过渡的方式来实现动画效果，所以transition不能实现复杂的动画效果，而Animations功能是是通过关键幀以及每个关键帧中的属性值来实现更为复杂的动画效果。</span><br></pre></td></tr></table></figure><ul><li>Animations的使用方法:<br><a href="https://github.com/HeiLiu/markdown_source/tree/master/demo/fir.im" target="_blank" rel="noopener">参考我的飞机Demo更好哦</a><br><code>@-webkit-keyframes</code> 关键帧合集名称{<br>   创建关键帧的代码<br>  }<br>  0%~100%{<br>本关键帧中的样式<br>}<br>关键帧创建好了之后，还要在元素的样式中使用该关键帧。方法如下: <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">    元素&#123;</span><br><span class="line">    - webkit-animation-name :关键帧合集名称 ;</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">webkit-animation-duration</span><span class="selector-pseudo">:5s</span> ;</span><br><span class="line">    <span class="selector-tag">-</span> <span class="selector-tag">webkit-animation-timing-function</span> <span class="selector-pseudo">:linear</span>;<span class="selector-tag">-webkit-animation-iteration-count</span><span class="selector-pseudo">:infnite</span>  </span><br><span class="line">    &#125;</span><br><span class="line">    ```  </span><br><span class="line">    `<span class="selector-tag">-webkit-animation-name</span>`指定合集名称，  </span><br><span class="line">    `<span class="selector-tag">-webkit-animation-duration</span>`整个动画执行完成所需的时司、需要的时间，  </span><br><span class="line">    `<span class="selector-tag">-webkit-animation-timing-function</span>`实现动画的方法</span><br><span class="line">    </span><br><span class="line">    `<span class="selector-tag">-webkit-animation-iteration-count</span>`属性的属性值设定为某个整数值，那么这个动画播放的次数就等于这个整数值(<span class="selector-tag">infinite</span>是无限循环播放)。</span><br><span class="line">    </span><br><span class="line">    3、实现动画的方法:    </span><br><span class="line">      <span class="selector-tag">A</span>、<span class="selector-tag">linear</span>: 匀速进行.  </span><br><span class="line">      <span class="selector-tag">B</span>、<span class="selector-tag">ease-in</span>: 开始速度很慢，然后沿曲线进行加快，  </span><br><span class="line">      <span class="selector-tag">C</span>、<span class="selector-tag">ease-out</span>: 开始速度很快，然后沿着曲线进行减速.  </span><br><span class="line">      <span class="selector-tag">D</span>、<span class="selector-tag">ease</span>: 开始时速度很快，然后沿着曲线进行减速，然后再沿着曲线加速，  </span><br><span class="line">      <span class="selector-tag">E</span>、<span class="selector-tag">ease-in-out</span>: 开始时速度很慢，然后沿着曲线进行加速，然后再沿着曲线减速.</span><br><span class="line"></span><br><span class="line">也可以以合集的形式进行样式书写：  </span><br><span class="line">```<span class="selector-tag">animation</span>: <span class="selector-tag">name</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span> <span class="selector-tag">iteration-count</span> <span class="selector-tag">direction</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;text-shadow属性&quot;&gt;&lt;a href=&quot;#text-shadow属性&quot; class=&quot;headerlink&quot; title=&quot;text-shadow属性&quot;&gt;&lt;/a&gt;text-shadow属性&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;介绍:&lt;/strong&gt;&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Css3" scheme="http://yoursite.com/tags/Css3/"/>
    
  </entry>
  
  <entry>
    <title>Css3之Flex布局</title>
    <link href="http://yoursite.com/2018/05/02/flexbox/"/>
    <id>http://yoursite.com/2018/05/02/flexbox/</id>
    <published>2018-05-01T16:00:00.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Flex-flexible-box-弹性布局"><a href="#Flex-flexible-box-弹性布局" class="headerlink" title="Flex(flexible box)  弹性布局"></a>Flex(flexible box)  弹性布局</h2><p>传统的布局解决方案，基于盒模型，通过 <code>css</code>中的<code>display</code>属性 + <code>position</code>属性 + <code>float</code>属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。 </p><ul><li>概念<ul><li>任何容器都可以设为<code>flex</code>布局</li><li>采用flex布局的元素即为flex container，其子元素为容器成员(flex item)</li><li>设为flex布局以后，子元素的float/clear/vertical-align属性将会失效  </li></ul></li><li>主轴和交叉轴  <ul><li><strong>容器默认存在水平主轴<code>main axis</code>和垂直的交叉轴<code>cross axis</code></strong></li><li><strong>flex-item排列的方向是主轴</strong>      </li></ul></li><li><p><code>flex-container</code>容器属性  </p><ul><li><p><strong><code>flex-direction</code>决定主轴的方向(同时也是flex-item的排列方向)</strong></p><blockquote><p>flex-direction: row | row-reverse | column | column-reverse; </p></blockquote><ul><li><code>row</code>（默认值）：主轴是水平方向，flex-item水平从左往右排列  </li><li><code>column</code> : 主轴呈垂直方向,从上边沿向下排列  </li><li><code>reverse</code>参数: 将起始与终点进行互换</li></ul></li><li><code>flex-wrap</code> 属性定义如果在一条轴线上排不下，换行的规则 <blockquote><p>  flex-wrap：nowrap | wrap | wrap-reverse  </p><ul><li><code>nowrap</code>（默认值）：不换行</li><li><code>wrap</code> : 自然换行 直接将多余的元素从下一行开始排列  </li><li><code>wrap-reverse</code>: 将第一行排列到下方 </li></ul></blockquote></li><li><code>flex-flow</code>  是<code>flex-direction</code>和<code>flex-wrap</code>的简写，默认值为<code>row</code> <code>nowrap</code></li><li><code>justify-content</code>:定义flex-item在主轴<code>main-axis</code>上的对齐方式     <blockquote><p>justify-content: flex-start | flex-end | center | space-between | space-around   </p><ul><li><code>flex-start</code>（默认值）：左对齐；  </li><li><code>flex-end</code>右对齐；  </li><li><code>center</code>居中；</li><li><code>space-between</code>：两端对其，flex-item间的间隔距离相等</li><li><code>space-around</code>：每个flex-item两侧的间隔相等，相当于设置左右<code>margin</code>值相等</li></ul></blockquote></li><li><code>align-items</code>: 定义<code>flex-item</code>在交叉轴的对齐方式<blockquote><p>align-items: flex-start | flex-end | center | baseline | strecth。五个取值与交叉轴方向有关</p><ul><li>flex-start|flex-end|center和flex-direction一样，只不过是在交叉轴起点、终点、中点对齐；</li><li>baseline：flex-item的第一行文字的基线对齐</li><li>stretch（默认值）：如果flex-item没有设置高度或者值为auto，将占满整个容器高度 </li></ul></blockquote></li><li>align-content：如果容器内出现多跟轴线（即出现wrap），定义主轴在交叉轴上的对齐方式，只有一根轴线时不起作用<blockquote><p>align-content: flex-start | flex-end | center | space-between | space-around | stretch</p><ul><li><code>stretch</code>（默认值）：轴线沾满整个交叉轴</li><li><code>space-between</code>：与交叉轴两端对齐，轴线间的间隔平均分布</li><li><code>space-around</code>：每根轴线两侧的间隔相等</li><li><code>flex-start</code>：与交叉轴起点对其  </li></ul></blockquote></li></ul></li><li><p><code>flex-item</code>项目的属性   </p><ul><li>order 属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</li><li>flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大.<br><br>&nbsp; &nbsp; &nbsp;如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</li><li>flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。负值对该属性无效。</li><li>flex 属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。<blockquote><p>flex: none | [ &lt;’flex-grow’&gt; &lt;’flex-shrink’&gt;? || &lt;’flex-basis’&gt; ]</p></blockquote></li><li>flex-basis</li><li>align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 <blockquote><p>align-self: auto | flex-start | flex-end | center | baseline | stretch; </p></blockquote></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Flex-flexible-box-弹性布局&quot;&gt;&lt;a href=&quot;#Flex-flexible-box-弹性布局&quot; class=&quot;headerlink&quot; title=&quot;Flex(flexible box)  弹性布局&quot;&gt;&lt;/a&gt;Flex(flexible box)
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Flex" scheme="http://yoursite.com/tags/Flex/"/>
    
  </entry>
  
  <entry>
    <title>next主题个性化配置</title>
    <link href="http://yoursite.com/2018/04/26/nextconfig/"/>
    <id>http://yoursite.com/2018/04/26/nextconfig/</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看到一些大神的next博客站点很酷 那到底是怎么实现的呢 经过一番的倒腾，终于将一些使用且比较酷的功能添加到自己的博客中  </p></blockquote><h3 id="主要添加的功能有："><a href="#主要添加的功能有：" class="headerlink" title="主要添加的功能有："></a>主要添加的功能有：</h3><ul><li>在右上角或者左上角实现fork me on github</li><li>添加RSS·</li><li>添加动态背景·</li><li>在每篇文章末尾统一添加“本文结束”标记</li><li>修改作者头像并旋转</li><li>主页文章添加阴影效果</li><li>在网站底部加上访问量</li><li>添加菜单分类页面·</li><li>首页实现文章内容截断（展示阅读全文）</li><li>网站底部字数统计</li><li>添加 README.md 文件·</li><li>隐藏网页底部powered By Hexo / 强力驱动</li><li>添加来必力评论 Livere·</li><li>DaoVoice 在线联系</li><li>添加站内搜索<h4 id="0-实现fork-me-on-github"><a href="#0-实现fork-me-on-github" class="headerlink" title="0 实现fork me on github"></a><strong>0 实现fork me on github</strong></h4></li></ul><h4 id="1-修改头像并配置头像样式"><a href="#1-修改头像并配置头像样式" class="headerlink" title="1.修改头像并配置头像样式"></a><strong>1.修改头像并配置头像样式</strong></h4><ul><li>编辑 ·主题配置文件·， 修改字段 `avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是：  <blockquote><p>将头像图片放置在 source/images/ 目录下 </p><pre><code>配置为：avatar: /images/avatar.png或者使用图片的在线地址  </code></pre></blockquote><h4 id="2-设置博客背景动画"><a href="#2-设置博客背景动画" class="headerlink" title="2.设置博客背景动画"></a><strong>2.设置博客背景动画</strong></h4>NexT 自带两种背景动画效果：<br>编辑 主题配置文件， 搜索 canvas_nest 或 three_waves，根据您的需求设置值为 true 或者 false 即可：如下、</li></ul><blockquote><p> #canvas_nest<br>    canvas_nest: true //开启动画</p></blockquote><blockquote><p>  #three_waves<br>    three_waves: false //关闭动画</p></blockquote><h4 id="3-添加RSS"><a href="#3-添加RSS" class="headerlink" title="3.添加RSS"></a><strong>3.添加RSS</strong></h4><p>在blog目录下安装hexo-generate-feed  然后打开z主题配置文件,在里面配置为如下样子：(就是在rss:的后面加上/atom.xml,注意在冒号后面要加一个空格)</p><blockquote><p>  #Set rss to false to disable feed link.</p></blockquote><pre><code>#Leave rss as empty to use site&apos;s feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml</code></pre><h4 id="4-在网站底部加上访问量"><a href="#4-在网站底部加上访问量" class="headerlink" title="4.在网站底部加上访问量"></a><strong>4.在网站底部加上访问量</strong></h4><blockquote><p>有点不想写了</p></blockquote><h4 id="5-网站底部字数统计"><a href="#5-网站底部字数统计" class="headerlink" title="5.网站底部字数统计"></a><strong>5.网站底部字数统计</strong></h4><p>&nbsp; 修改如下部分</p><blockquote><p>  #Post wordcount display settings</p></blockquote><pre><code># Dependencies: https://github.com/willin/hexo-wordcountpost_wordcount:  item_text: true wordcount: truemin2read: truetotalcount: false separated_meta: true  </code></pre><p>在适当的位置添加以下页面代码</p><h4 id="6-添加README-md"><a href="#6-添加README-md" class="headerlink" title="6.添加README.md"></a><strong>6.添加README.md</strong></h4><ul><li><p>每个项目下一般都有一个 README.md 文件，但是使用 hexo 部署到仓库后，项目下是没有  README.md 文件的。</p></li><li><p>在 Hexo 目录下的 source 根目录下添加一个 README.md 文件，修改站点配置文件 _config.yml，将 skip_render 参数的值设置为<code>skip_render:README.md</code></p></li><li><p>保存退出即可。再次使用 hexo d 命令部署博客的时候就不会在渲染 README.md 这个文件了。</p><h4 id="7-添加菜单分类-标签页面"><a href="#7-添加菜单分类-标签页面" class="headerlink" title="7.添加菜单分类/标签页面"></a><strong>7.添加菜单分类/标签页面</strong></h4><p>&nbsp;  在hexo站点目录下 使用<code>hexo new page</code> 新建一个页面 命名为tags 如下：</p><blockquote><p>  hexo new page tags<br>  此时会在hexo &gt; source文件夹中会生成一个<code>tags</code>文件夹。<br>  编辑tags文件夹下面的<code>.md</code>文件</p></blockquote><p>&nbsp;   在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中，如下:</p><blockquote><p>menu:<br>home:  / || home<br>archives:  /archives/ || archive<br>tags:  /tags/ || tags</p></blockquote><p>&nbsp; 注：||之前的值是<code>目标链接</code>，之后的是页面的<code>图标</code>，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。</p></li></ul><h4 id="8-添加livere来必力评论模块"><a href="#8-添加livere来必力评论模块" class="headerlink" title="8.添加livere来必力评论模块"></a><strong>8.添加livere来必力评论模块</strong></h4><p><strong>注意</strong>：最新版 hexo-theme-next 已经包含 LiveRe 插件，下载<code>最新版本</code>，配置 <code>livere_uid</code> 即可使用</p><h5 id="获取livere-uid步骤"><a href="#获取livere-uid步骤" class="headerlink" title="获取livere_uid步骤"></a><strong>获取livere_uid步骤</strong></h5><ol><li>注册 LiveRe</li></ol><blockquote><p>进入 LiveRe，注册账号。</p><p>LiveRe 有两个版本：</p><p>City 版：是一款适合所有人使用的免费版本；<br>Premium 版：是一款能够帮助企业实现自动化管理的多功能收费版本。City版就够了。<br>安装，获取 uid：</p></blockquote><p><img src="https://blog.smoker.cc/images/web/livere-get-code.png" alt="此处输入图片的描述"><br>填写完成后，进入到 管理页面 -&gt; 代码管理 -&gt; 一般网站 代码中，<code>data-uid</code> 即为所需 <code>uid</code></p><ol start="2"><li><p>添加 LiveRe 插件</p><p>首先在 _config.yml 文件中添加如下配置：</p><blockquote><p> #Support for LiveRe comments system.<br> #You can get your uid from <a href="https://livere.com/insight/myCode" target="_blank" rel="noopener">https://livere.com/insight/myCode</a> (General web site)<br>livere_uid: <code>your uid</code></p></blockquote><p>其中 livere_uid 即上一步获取到的 uid。其他的设置在最新版中都不需要配置啦 所以说程序员还是要用新的潮的东西</p></li></ol><h4 id="9-设置网站图标"><a href="#9-设置网站图标" class="headerlink" title="9.设置网站图标"></a><strong>9.设置网站图标</strong></h4><p> 具体方法实现</p><pre><code>找一张（32*32）的ico图标，并将图标名称改为favicon.ico，然后把图标放在/themes/next/source/images里，并且修改`主题配置文件`,下面就是图标配置代码修改即可：</code></pre><blockquote><p>favicon:<br>  <code>small: /images/favicon-16x16-next.png</code><br>  <code>medium: /images/favicon-32x32-next.png</code><br>  apple_touch_icon: /images/apple-touch-icon-next.png<br>  safari_pinned_tab: /images/logo.svg</p></blockquote><h4 id="10-站内博客搜索"><a href="#10-站内博客搜索" class="headerlink" title="10.站内博客搜索"></a><strong>10.站内博客搜索</strong></h4><p>添加百度/谷歌/本地 自定义站点内容搜索.</p><pre><code>1.安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：  </code></pre><blockquote><p> npm install hexo-generator-searchdb –save</p></blockquote><pre><code>2.编辑 站点配置文件，新增以下内容到任意位置：</code></pre><blockquote><p>search:<br>      path: search.xml<br>      field: post<br>      format: html<br>      limit: 10000</p></blockquote><p>3.编辑 主题配置文件，启用本地搜索功能：<br>    &gt;   #Local search<br>         local_search:<br>        enable: true</p><h4 id="11-首页文章内容截断"><a href="#11-首页文章内容截断" class="headerlink" title="11.首页文章内容截断"></a><strong>11.首页文章内容截断</strong></h4><p>编辑主题配置文件 如下设置则会开启自动截断功能 </p><blockquote><p>  #Automatically Excerpt. Not recommend.</p></blockquote><pre><code># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.auto_excerpt:  enable: true  length: 150</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;看到一些大神的next博客站点很酷 那到底是怎么实现的呢 经过一番的倒腾，终于将一些使用且比较酷的功能添加到自己的博客中  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;主要添加的功能有：&quot;&gt;&lt;a href=&quot;#主要添加的功能有：&quot; cla
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="倒腾" scheme="http://yoursite.com/tags/%E5%80%92%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>git 操作常用命令</title>
    <link href="http://yoursite.com/2018/04/21/gitCommand/"/>
    <id>http://yoursite.com/2018/04/21/gitCommand/</id>
    <published>2018-04-20T16:00:00.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>git所有的命令都是以git开头 后面为所要做的操作 再后面即为参数</p><ul><li>初始化 git init 初始化后会生成.git文件</li><li>git clone URL 将URL地址下的资源clone到本地  </li><li>git add . 将当前目录下面的文件提交到暂存区</li><li>git commit -m ‘你所做的修改，利于以后维护和回退’ 会得到一个指针</li><li>git push origin master 上传代码到github <code>master</code>分支</li><li>git branch 查看所有分支</li><li>git branch hexo 新建名为hexo的分支</li><li>git checkout hexo 切换到hexo分支</li><li>git merge <branch> 合并指定分支到当前分支</branch></li></ul><p>##git合并分支<br>&nbsp;git支持很多种工作流程，在进行合作开发时一般是这样，远程创建一个主分支，本地每人创建功能分支，日常工作流程如下：</p><ol><li><p>去自己的工作分支</p><blockquote><p>  git checkout work</p></blockquote></li><li><p>工作<br>….</p></li><li><p>提交工作分支的修改</p><blockquote><p>git commit -a</p></blockquote></li></ol><p>4.回到主分支  </p><blockquote><p>git checkout master</p></blockquote><p>5.获取远程最新的修改，此时不会产生冲突  </p><blockquote><p>git pull</p></blockquote><p>6.回到工作分支  </p><blockquote><p>git checkout work</p></blockquote><p>7.用rebase合并主干的修改，如果有冲突在此时解决  </p><blockquote><p>git rebase master</p></blockquote><p>8.回到主分支  </p><blockquote><p>git checkout master</p></blockquote><p>9.合并工作分支的修改，此时不会产生冲突。  </p><blockquote><p>git merge work</p></blockquote><p>10.提交到远程主干  </p><blockquote><p>git push origin master</p></blockquote><p>这样做的好处是，远程主干上的历史永远是线性的。每个人在本地分支解决冲突，不会在主干上产生冲突.</p><p>可以在一条分支上一起开发，你有变更的时候，在提交前，使用</p><blockquote><p>git stash</p></blockquote><p>这样将本地的修改全部缓存在一个堆栈中了，然后把别人的修改同步过来</p><blockquote><p>git pull –rebase</p></blockquote><p>下一步是将自己的变更恢复到最新的节点上</p><blockquote><p>git stash pop</p></blockquote><p>然后再使用git commit提交，这样就会让一个分支的版本按顺序继续发展</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;git所有的命令都是以git开头 后面为所要做的操作 再后面即为参数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始化 git init 初始化后会生成.git文件&lt;/li&gt;
&lt;li&gt;git clone URL 将URL地址下的资源clone到本地  &lt;/li&gt;
&lt;li&gt;git add .
      
    
    </summary>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Skill/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>自己搭建博客</title>
    <link href="http://yoursite.com/2018/04/19/hexo/"/>
    <id>http://yoursite.com/2018/04/19/hexo/</id>
    <published>2018-04-19T13:46:12.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hexo-是开源的npm的博客包"><a href="#Hexo-是开源的npm的博客包" class="headerlink" title="Hexo 是开源的npm的博客包"></a>Hexo 是开源的npm的博客包</h4><pre><code>使用markdown语法写博客 结合github page 服务，有一个免费的开源博客</code></pre><ul><li><p>git配置过程  </p><ul><li>全局配置 username email ssh<br>   在git bash中执行代码：  <pre><code>1. git config global user.name &quot;gitname&quot;  2.git config global user.email &quot;email&quot;  3.ssh-keygen -t rsa -C &quot;git@email&quot;  一路回车  </code></pre>   找到.ssh文件夹 打开id_rsa.pub复制内容   <pre><code>4.到github上 setting 中ssh key添加 title为空 粘贴ssh至内容中  </code></pre></li><li>验证一下是否成功<br>   1.在hexo目录下将<br>   <a href="https://github.com/HeiLiu/HeiLiu.github.io.git" target="_blank" rel="noopener">https://github.com/HeiLiu/HeiLiu.github.io.git</a></li></ul></li></ul><ul><li><p>hexo init 初始化博客  </p><ol><li>执行一下初始化命令系统会去github clone一个博客来到本地  <ol start="2"><li>./node_modules是以来文件夹，npm包 项目所有依赖都在这里。<br>3.博客存放地址 source/_post/**.md<br>4.markdown 语法 更简捷的写html<br>5.theme主题文件夹</li></ol></li></ol></li><li><p>hexo clean </p><ul><li>清空生成的站点博客文件  </li></ul></li><li><p>hexo generate  </p><ul><li>博客的产生<br>   hexo generate 将markdown语法编译成public/*.html</li></ul></li><li><p>hexo server  </p><pre><code>打开本地服务器  </code></pre></li><li><p>hexo deploy</p><ul><li>将本地生成的public文件内容发布到github      </li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Hexo-是开源的npm的博客包&quot;&gt;&lt;a href=&quot;#Hexo-是开源的npm的博客包&quot; class=&quot;headerlink&quot; title=&quot;Hexo 是开源的npm的博客包&quot;&gt;&lt;/a&gt;Hexo 是开源的npm的博客包&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;使用mark
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="倒腾" scheme="http://yoursite.com/tags/%E5%80%92%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/04/19/hello-world/"/>
    <id>http://yoursite.com/2018/04/19/hello-world/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>想把我唱给你听</title>
    <link href="http://yoursite.com/2018/04/19/heihei/"/>
    <id>http://yoursite.com/2018/04/19/heihei/</id>
    <published>2018-04-18T16:00:00.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="想把我唱给你听-趁年轻尽情地爱吧"><a href="#想把我唱给你听-趁年轻尽情地爱吧" class="headerlink" title="想把我唱给你听 趁年轻尽情地爱吧"></a>想把我唱给你听 趁年轻尽情地爱吧</h4><h4 id="最最亲爱的人啊-路途遥远我们在一起吧"><a href="#最最亲爱的人啊-路途遥远我们在一起吧" class="headerlink" title="最最亲爱的人啊 路途遥远我们在一起吧"></a>最最亲爱的人啊 路途遥远我们在一起吧</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;想把我唱给你听-趁年轻尽情地爱吧&quot;&gt;&lt;a href=&quot;#想把我唱给你听-趁年轻尽情地爱吧&quot; class=&quot;headerlink&quot; title=&quot;想把我唱给你听 趁年轻尽情地爱吧&quot;&gt;&lt;/a&gt;想把我唱给你听 趁年轻尽情地爱吧&lt;/h4&gt;&lt;h4 id=&quot;最最亲爱的人啊-路
      
    
    </summary>
    
      <category term="有感" scheme="http://yoursite.com/categories/%E6%9C%89%E6%84%9F/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
