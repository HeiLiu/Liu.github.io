<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HeiLiu</title>
  
  <subtitle>有一句Hello World想要对你说</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-31T05:31:18.865Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘江龙</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/31/export/export/markdown/"/>
    <id>http://yoursite.com/2019/07/31/export/export/markdown/</id>
    <published>2019-07-31T05:31:18.865Z</published>
    <updated>2019-07-31T05:31:18.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RegRxp-正则表达式"><a href="#RegRxp-正则表达式" class="headerlink" title="RegRxp(正则表达式)"></a>RegRxp(正则表达式)</h1><blockquote><p>简化对字符串的操作<br>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p></blockquote><h2 id="什么是正则？"><a href="#什么是正则？" class="headerlink" title="什么是正则？"></a>什么是正则？</h2><p>规则、模式; 强大的字符串匹配的工具  </p><ul><li><p>风格<br>js风格: const reg = new RegExp(‘a’, i)<br>perl风格: const reg = /a/i  </p></li><li><p>转义字符  </p><p>|    转义字符    | 说明 |<br>| ———- | — |<br>| \d |  数字 [0-9]|<br>|\|斜杠 |<br>|\n|换行 |<br>|\w|英文 数字 下划线 [a-z0-9_]|<br>|\s|空格|<br>|\D|除了数字 [^0-9]|<br>|\W|非数字 字母 下划线 [^z-a0-9_]|<br>|\S|非空白字符|</p></li></ul><ul><li><p>特殊字符(元字符)  </p><ul><li><p>[] 方括号   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  [abc] 表示a或者b或者c </span></span><br><span class="line"><span class="keyword">const</span> re = <span class="regexp">/[abc]pc/g</span></span><br><span class="line"><span class="comment">// 范围匹配</span></span><br><span class="line">[a-z] [<span class="number">0</span><span class="number">-9</span>] </span><br><span class="line">[^a-z]  <span class="comment">// 匹配非英文部分</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>限定符(量词)  </p><ul><li><p>基本形式： {n}表示出现的次数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 8位电话号码  </span><br><span class="line">/[1-9]\d&#123;7&#125;/        // 以非零数字开头后面八位随意</span><br></pre></td></tr></table></figure></li><li><p>表示出现次数范围： {n, m}  表示出现最少n次 最多m次  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// QQ 正则</span><br><span class="line">/[1-9]\d&#123;4, 10&#125;/</span><br><span class="line">```  </span><br><span class="line">- 不限次数：&#123;n, &#125; 表示最少n次， 最多不限  </span><br><span class="line">. 任意字符</span><br><span class="line">*:  =&gt; &#123;0, &#125; 任意次</span><br><span class="line">+: 若干 =&gt; &#123;1, &#125; 最少一次 最多不限   </span><br><span class="line">?: 最少零次 最多一次 =&gt; &#123;0, 1&#125;    </span><br><span class="line">^: 行首  </span><br><span class="line">$: 行尾</span><br></pre></td></tr></table></figure><p>固话区号  010-2473544<br>(0\d{2,3}-)?[1-9]\d{7}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- 方法  </span><br><span class="line"></span><br><span class="line">  - search  返回匹配的位置</span><br><span class="line">  - match 把所有匹配的东西都提取出来  </span><br><span class="line">  - replace 字符串替换,替换所有匹配的字符串，返回替换以后的字符串  </span><br><span class="line">  - test   检验字符串是否符合正则 返回Boolean </span><br><span class="line">    &gt; 特性 只要字符串一部分符合要求就返回true</span><br><span class="line">    ```js</span><br><span class="line">      // 校验邮箱</span><br><span class="line">      const email = &apos;你好啊heiliu@Gmail.com&apos;</span><br><span class="line">      const re = /\w+@[a-z0-9]+\.[a-z]+/</span><br><span class="line">      re.test(email)  // 后半部分符合 返回 true  </span><br><span class="line"></span><br><span class="line">      const re1 = /^\w+@[a-z0-9]+\.[a-z]+$/ // 限制首尾</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="应用例子"><a href="#应用例子" class="headerlink" title="应用例子"></a>应用例子</h2><ul><li>查找字符串中的数字并返回  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//  查找字符串中的数字  </span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">'123ask32lks,alf21lksa12e45l3'</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\d+/g</span>    <span class="comment">// global</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.match(reg))</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">- 敏感词过滤  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">  <span class="comment">// replace 的用例</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/匹配|出来/</span>;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">'把所有匹配的东西都提取出来 '</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.replace(reg, <span class="string">'***'</span>))  <span class="comment">// 把所有***的东西都提取***</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RegRxp-正则表达式&quot;&gt;&lt;a href=&quot;#RegRxp-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;RegRxp(正则表达式)&quot;&gt;&lt;/a&gt;RegRxp(正则表达式)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简化对字符串的操作&lt;br&gt;正则
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/31/export/export/index/"/>
    <id>http://yoursite.com/2019/07/31/export/export/index/</id>
    <published>2019-07-31T05:31:18.790Z</published>
    <updated>2019-07-31T05:31:18.790Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><html lang="en"><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <title>title</title>    <meta name="description" content>    <meta name="author" content>    <meta name="apple-mobile-web-app-capable" content="yes">    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">    <!-- REVEAL CSS-->    <link rel="stylesheet" href="libs/reveal.js/font-awesome-4.7.0/css/font-awesome.min.css">    <link rel="stylesheet" href="libs/reveal.js/3.7.0/css/reveal.css">    <link rel="stylesheet" href="libs/reveal.js/3.7.0/css/theme/black.css" id="theme">    <link rel="stylesheet" href="libs/reveal.js/3.7.0/plugin/title-footer/title-footer-mod.css">    <!-- Theme used for syntax highlighting of code -->    <link rel="stylesheet" href="libs/reveal.js/3.7.0/lib/css/zenburn.css">    <link rel="stylesheet" href="libs/highlight.js/9.12.0/Zenburn.css">         <!-- Printing and PDF exports -->    <script>        var link = document.createElement('link');        link.rel = 'stylesheet';        link.type = 'text/css';        link.href = window.location.search.match(/print-pdf/gi) ? 'libs/reveal.js/3.7.0/css/print/pdf.css' : 'libs/reveal.js/3.7.0/css/print/paper.css';        document.getElementsByTagName('head')[0].appendChild(link);    </script>                <style>                                /* Solarized Light theme */                .line { display: block; }                .line.focus { background: #fdf6e3; color: #657b83; }                .line.focus .hljs-comment, .line.focus .hljs-quote { color: #93a1a1; }                .line.focus .hljs-keyword, .line.focus .hljs-selector-tag, .line.focus .hljs-addition { color: #859900; }                .line.focus .hljs-number, .line.focus .hljs-string, .line.focus .hljs-meta .hljs-meta-string, .line.focus .hljs-literal, .line.focus .hljs-doctag, .line.focus .hljs-regexp { color: #2aa198; }                .line.focus .hljs-title, .line.focus .hljs-section, .line.focus .hljs-name, .line.focus .hljs-selector-id, .line.focus .hljs-selector-class { color: #268bd2; }                .line.focus .hljs-attribute, .line.focus .hljs-attr, .line.focus .hljs-variable, .line.focus .hljs-template-variable, .line.focus .hljs-class .hljs-title, .line.focus .hljs-type { color: #b58900; }                .line.focus .hljs-symbol, .line.focus .hljs-bullet, .line.focus .hljs-subst, .line.focus .hljs-meta, .line.focus .hljs-meta .hljs-keyword, .line.focus .hljs-selector-attr, .line.focus .hljs-selector-pseudo, .line.focus .hljs-link { color: #cb4b16; }                .line.focus .hljs-built_in, .line.focus .hljs-deletion { color: #dc322f; }                .line.focus .hljs-formula { background: #eee8d5; }                .line.focus .hljs-emphasis { font-style: italic; }                .line.focus .hljs-strong { font-weight: bold; }                .yellow-slide .line.focus:nth-child(2) { background: yellow; }    .reveal .slides section .code-presenting-annotation {        font-size: 70%;    }    .reveal .slides section .fragment.current-only {        visibility: visible;        display: none;    }    .reveal .slides section .fragment.current-only.current-fragment {        display: block;    }    .line {        display: block;    }    .line.focus {        /* opacity: 1.0; */    }.hljs {  background: none;}.reveal pre {  width: 98%;  margin: 0px;  box-shadow: none;}.reveal pre code {  font-size: 1.2em;  line-height: 1.2;  border-radius: 10px;  max-height: 60vh !important;  overflow: hidden !important;}@media (device-width: 100vw) and (device-height: 100vh) {  .reveal pre code {    max-height: 50vh !important;  }}#logo img {  max-height: 3.5em;  max-width: none;  min-width: 50px;}.reveal .slides section .code-presenting-annotation {  color: white;  background: black;  padding: 0px 15px;  border-radius: 15px;  opacity: 0.75 !important;  font-size: 50% !important;}</style><script>         if(window.location.search.match( /print-pdf-now/gi )) {           window.print();         }      </script></head><body>            <div class="reveal">        <!-- Any section element inside of this container is displayed as a slide -->        <div class="slides">            <section data-markdown="/markdown.md" data-separator="^?---?$" data-separator-vertical="^?--?$" data-separator-notes="note:" data-charset="utf-8">            </section>        </div>    </div>    <script src="libs/reveal.js/3.7.0/lib/js/head.min.js"></script>    <script src="libs/reveal.js/3.7.0/js/reveal.orig.js"></script><!--     <script src="libs/jquery/2.2.4/jquery.min.js"></script> -->    <script>        // More info https://github.com/hakimel/reveal.js#configuration        Reveal.initialize({                       controls: true,            controlsTutorial: true,            controlsLayout: 'bottom-right',            controlsBackArrows: 'faded',            progress: true,            slideNumber: false,            history: true,            keyboard: true,            overview: true,            center: true,            touch: true,            loop: false,            rtl: false,            shuffle: false,            fragments: true,            fragmentInURL: false,            embedded: false,            help: true,            showNotes: false,            autoPlayMedia: false,            autoSlide: 0,            autoSlideStoppable: true,            autoSlideMethod: Reveal.navigateNext,            defaultTiming: 120,            mouseWheel: false,            hideAddressBar: true,            previewLinks: false,            transition: 'default',            transitionSpeed: 'default',            backgroundTransition: 'default',            viewDistance: 3,            parallaxBackgroundImage: '',            parallaxBackgroundSize: '',            parallaxBackgroundHorizontal: null,            parallaxBackgroundVertical: null,            display: 'block',            // More info https://github.com/hakimel/reveal.js#dependencies            dependencies: [               // { src: 'libs/reveal.js/3.7.0/lib/js/classList.js', condition: function () { return !document.body.classList; } },                { src: 'libs/reveal.js/3.7.0/plugin/markdown/marked.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },                { src: 'libs/reveal.js/3.7.0/plugin/markdown/markdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },               // { src: 'libs/reveal.js/3.7.0/plugin/highlight/highlight.js', async: true, callback: function () { hljs.initHighlightingOnLoad(); } },                                { src: 'libs/reveal.js/3.7.0/plugin/search/search.js', async: true },                { src: 'libs/reveal.js/3.7.0/plugin/zoom-js/zoom.js', async: true },                                                { src: 'libs/reveal.js/3.7.0/plugin/notes/notes.js', async: true },                { src: 'libs/reveal.js/3.7.0/plugin/chalkboard/chalkboard.js' },                                                { src: 'libs/reveal.js/3.7.0/plugin/chart/Chart.min.js' },                { src: 'libs/reveal.js/3.7.0/plugin/chart/csv2chart.js' },                { src: 'libs/reveal.js/3.7.0/plugin/embed-tweet/embed-tweet.js' },                { src: 'libs/reveal.js/3.7.0/plugin/menu/menu.js' },                                                { src: 'libs/reveal.js/3.7.0/plugin/math/math.js', async: true },                { src: 'libs/highlight.js/9.12.0/highlight.js', async: true },                { src: 'libs/reveal.js/3.7.0/plugin/title-footer/title-footer.js', async: true, callback: function() { title_footer.initialize(); } },                                                { src: 'libs/highlight.js/9.12.0/reveal-code-focus-1.0.0-mod.js',                  async: true,                  callback: function() {                    RevealCodeFocus();                  }                },                // { src: 'libs/reveal.js/3.7.0/plugin/reveal-code-focus/highlight.pack.js' },                // { src: 'libs/reveal.js/3.7.0/plugin/reveal-code-focus/reveal-code-focus.js', async: true, callback: function() { RevealCodeFocus(); } },               // {src: 'libs/reveal.js/3.7.0/plugin/line-numbers/line-numbers.js'}            ]            ,            keyboard: {                67: function () { RevealChalkboard.toggleNotesCanvas() },// toggle notes canvas when 'c' is pressed                66: function () { RevealChalkboard.toggleChalkboard() },// toggle chalkboard when 'b' is pressed                46: function () { RevealChalkboard.clear() },// clear chalkboard when 'DEL' is pressed                8: function () { RevealChalkboard.reset() },// reset chalkboard data on current slide when 'BACKSPACE' is pressed                68: function () { RevealChalkboard.download() },// downlad recorded chalkboard drawing when 'd' is pressed            },            math: {                mathjax: 'libs/reveal.js/3.7.0/plugin/math/MathJax.js',// mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js',config: 'TeX-AMS_HTML-full'},            chart: {defaults: { global: { title: { fontColor: "#FFF" }, legend: {position: "bottom",labels: { fontColor: "#FFF" },},tooltips: {labels: { fontColor: "#FFF" },},}, scale: { scaleLabel: { fontColor: "#FFF" }, gridLines: { color: "#FFF", zeroLineColor: "#FFF" }, ticks: { fontColor: "#FFF" }, } },line: { borderColor: [ "rgba(20,220,220,.8)" , "rgba(220,120,120,.8)", "rgba(20,120,220,.8)" ], "borderDash": [ [5,10], [0,0] ] }, bar: { backgroundColor: [ "rgba(20,220,220,.8)" , "rgba(220,120,120,.8)", "rgba(20,120,220,.8)" ]}, pie: { backgroundColor: [ ["rgba(0,0,0,.8)" , "rgba(220,20,20,.8)", "rgba(20,220,20,.8)", "rgba(220,220,20,.8)", "rgba(20,20,220,.8)"] ]},radar: { borderColor: [ "rgba(20,220,220,.8)" , "rgba(220,120,120,.8)", "rgba(20,120,220,.8)" ]}, },            menu: {                // Specifies which side of the presentation the menu will                 // be shown. Use 'left' or 'right'.                side: 'left',                // Specifies the width of the menu.                // Can be one of the following:                // 'normal', 'wide', 'third', 'half', 'full', or                // any valid css length value                width: 'normal',                // Add slide numbers to the titles in the slide list.                // Use 'true' or format string (same as reveal.js slide numbers)                numbers: false,                // Specifies which slide elements will be used for generating                // the slide titles in the menu. The default selects the first                // heading element found in the slide, but you can specify any                // valid css selector and the text from the first matching                // element will be used.                // Note: that a section data-menu-title attribute or an element                // with a menu-title class will take precedence over this option                titleSelector: 'h1, h2, h3, h4, h5, h6',                // If slides do not have a matching title, attempt to use the                // start of the text content as the title instead                useTextContentForMissingTitles: false,                // Hide slides from the menu that do not have a title.                // Set to 'true' to only list slides with titles.                hideMissingTitles: false,                // Adds markers to the slide titles to indicate the                 // progress through the presentation. Set to 'false'                // to hide the markers.                markers: true,                // Specify custom panels to be included in the menu, by                // providing an array of objects with 'title', 'icon'                // properties, and either a 'src' or 'content' property.                // custom: false,                custom: [ ],                // Specifies the themes that will be available in the themes                // menu panel. Set to 'true' to show the themes menu panel                // with the default themes list. Alternatively, provide an                // array to specify the themes to make available in the                // themes menu panel, for example...                // [                //     { name: 'Black', theme: 'css/theme/black.css' },                //     { name: 'White', theme: 'css/theme/white.css' },                //     { name: 'League', theme: 'css/theme/league.css' }                // ]                themes: false,                // Specifies the path to the default theme files. If your                // presentation uses a different path to the standard reveal                // layout then you need to provide this option, but only                // when 'themes' is set to 'true'. If you provide your own                 // list of themes or 'themes' is set to 'false' the                 // 'themesPath' option is ignored.                themesPath: 'css/theme/',                // Specifies if the transitions menu panel will be shown.                // Set to 'true' to show the transitions menu panel with                // the default transitions list. Alternatively, provide an                // array to specify the transitions to make available in                // the transitions panel, for example...                // ['None', 'Fade', 'Slide']                transitions: false,                // Adds a menu button to the slides to open the menu panel.                // Set to 'false' to hide the button.                openButton: true,                // If 'true' allows the slide number in the presentation to                // open the menu panel. The reveal.js slideNumber option must                 // be displayed for this to take effect                openSlideNumber: false,                // If true allows the user to open and navigate the menu using                // the keyboard. Standard keyboard interaction with reveal                // will be disabled while the menu is open.                keyboard: true,                // Normally the menu will close on user actions such as                // selecting a menu item, or clicking the presentation area.                // If 'true', the sticky option will leave the menu open                // until it is explicitly closed, that is, using the close                // button or pressing the ESC or m key (when the keyboard                 // interaction option is enabled).                sticky: false,                // If 'true' standard menu items will be automatically opened                // when navigating using the keyboard. Note: this only takes                 // effect when both the 'keyboard' and 'sticky' options are enabled.                autoOpen: true,                // If 'true' the menu will not be created until it is explicitly                // requested by calling RevealMenu.init(). Note this will delay                // the creation of all menu panels, including custom panels, and                // the menu button.                delayInit: false,                // If 'true' the menu will be shown when the menu is initialised.                openOnInit: false,                // By default the menu will load it's own font-awesome library                // icons. If your presentation needs to load a different                // font-awesome library the 'loadIcons' option can be set to false                // and the menu will not attempt to load the font-awesome library.                loadIcons: false            },            chalkboard: { toggleChalkboardButton: { left: "60px", bottom: "30px", top: "auto", right: "auto" },toggleNotesButton: { left: "90px", bottom: "30px", top: "auto", right: "auto" },}        });           </script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.9.0&quot;&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;

    &lt;title&gt;title&lt;/title&gt;

 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/31/export/markdown/"/>
    <id>http://yoursite.com/2019/07/31/export/markdown/</id>
    <published>2019-07-31T05:28:18.885Z</published>
    <updated>2019-07-31T05:28:18.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RegRxp-正则表达式"><a href="#RegRxp-正则表达式" class="headerlink" title="RegRxp(正则表达式)"></a>RegRxp(正则表达式)</h1><blockquote><p>简化对字符串的操作<br>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p></blockquote><h2 id="什么是正则？"><a href="#什么是正则？" class="headerlink" title="什么是正则？"></a>什么是正则？</h2><p>规则、模式; 强大的字符串匹配的工具  </p><ul><li><p>风格<br>js风格: const reg = new RegExp(‘a’, i)<br>perl风格: const reg = /a/i  </p></li><li><p>转义字符  </p><p>|    转义字符    | 说明 |<br>| ———- | — |<br>| \d |  数字 [0-9]|<br>|\|斜杠 |<br>|\n|换行 |<br>|\w|英文 数字 下划线 [a-z0-9_]|<br>|\s|空格|<br>|\D|除了数字 [^0-9]|<br>|\W|非数字 字母 下划线 [^z-a0-9_]|<br>|\S|非空白字符|</p></li></ul><ul><li><p>特殊字符(元字符)  </p><ul><li><p>[] 方括号   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  [abc] 表示a或者b或者c </span></span><br><span class="line"><span class="keyword">const</span> re = <span class="regexp">/[abc]pc/g</span></span><br><span class="line"><span class="comment">// 范围匹配</span></span><br><span class="line">[a-z] [<span class="number">0</span><span class="number">-9</span>] </span><br><span class="line">[^a-z]  <span class="comment">// 匹配非英文部分</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>限定符(量词)  </p><ul><li><p>基本形式： {n}表示出现的次数  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 8位电话号码  </span><br><span class="line">/[1-9]\d&#123;7&#125;/        // 以非零数字开头后面八位随意</span><br></pre></td></tr></table></figure></li><li><p>表示出现次数范围： {n, m}  表示出现最少n次 最多m次  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// QQ 正则</span><br><span class="line">/[1-9]\d&#123;4, 10&#125;/</span><br><span class="line">```  </span><br><span class="line">- 不限次数：&#123;n, &#125; 表示最少n次， 最多不限  </span><br><span class="line">. 任意字符</span><br><span class="line">*:  =&gt; &#123;0, &#125; 任意次</span><br><span class="line">+: 若干 =&gt; &#123;1, &#125; 最少一次 最多不限   </span><br><span class="line">?: 最少零次 最多一次 =&gt; &#123;0, 1&#125;    </span><br><span class="line">^: 行首  </span><br><span class="line">$: 行尾</span><br></pre></td></tr></table></figure><p>固话区号  010-2473544<br>(0\d{2,3}-)?[1-9]\d{7}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- 方法  </span><br><span class="line"></span><br><span class="line">  - search  返回匹配的位置</span><br><span class="line">  - match 把所有匹配的东西都提取出来  </span><br><span class="line">  - replace 字符串替换,替换所有匹配的字符串，返回替换以后的字符串  </span><br><span class="line">  - test   检验字符串是否符合正则 返回Boolean </span><br><span class="line">    &gt; 特性 只要字符串一部分符合要求就返回true</span><br><span class="line">    ```js</span><br><span class="line">      // 校验邮箱</span><br><span class="line">      const email = &apos;你好啊heiliu@Gmail.com&apos;</span><br><span class="line">      const re = /\w+@[a-z0-9]+\.[a-z]+/</span><br><span class="line">      re.test(email)  // 后半部分符合 返回 true  </span><br><span class="line"></span><br><span class="line">      const re1 = /^\w+@[a-z0-9]+\.[a-z]+$/ // 限制首尾</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="应用例子"><a href="#应用例子" class="headerlink" title="应用例子"></a>应用例子</h2><ul><li>查找字符串中的数字并返回  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//  查找字符串中的数字  </span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">'123ask32lks,alf21lksa12e45l3'</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\d+/g</span>    <span class="comment">// global</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.match(reg))</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">- 敏感词过滤  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">  <span class="comment">// replace 的用例</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/匹配|出来/</span>;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">'把所有匹配的东西都提取出来 '</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.replace(reg, <span class="string">'***'</span>))  <span class="comment">// 把所有***的东西都提取***</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RegRxp-正则表达式&quot;&gt;&lt;a href=&quot;#RegRxp-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;RegRxp(正则表达式)&quot;&gt;&lt;/a&gt;RegRxp(正则表达式)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简化对字符串的操作&lt;br&gt;正则
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2019/07/31/export/index/"/>
    <id>http://yoursite.com/2019/07/31/export/index/</id>
    <published>2019-07-31T05:28:18.695Z</published>
    <updated>2019-07-31T05:28:18.744Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><html lang="en"><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="utf-8">    <title>RegExp(正则表达式)</title>    <meta name="description" content>    <meta name="author" content>    <meta name="apple-mobile-web-app-capable" content="yes">    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">    <!-- REVEAL CSS-->    <link rel="stylesheet" href="libs/reveal.js/font-awesome-4.7.0/css/font-awesome.min.css">    <link rel="stylesheet" href="libs/reveal.js/3.7.0/css/reveal.css">    <link rel="stylesheet" href="libs/reveal.js/3.7.0/css/theme/black.css" id="theme">    <link rel="stylesheet" href="libs/reveal.js/3.7.0/plugin/title-footer/title-footer-mod.css">    <!-- Theme used for syntax highlighting of code -->    <link rel="stylesheet" href="libs/reveal.js/3.7.0/lib/css/zenburn.css">    <link rel="stylesheet" href="libs/highlight.js/9.12.0/Zenburn.css">         <!-- Printing and PDF exports -->    <script>        var link = document.createElement('link');        link.rel = 'stylesheet';        link.type = 'text/css';        link.href = window.location.search.match(/print-pdf/gi) ? 'libs/reveal.js/3.7.0/css/print/pdf.css' : 'libs/reveal.js/3.7.0/css/print/paper.css';        document.getElementsByTagName('head')[0].appendChild(link);    </script>                <style>                                /* Solarized Light theme */                .line { display: block; }                .line.focus { background: #fdf6e3; color: #657b83; }                .line.focus .hljs-comment, .line.focus .hljs-quote { color: #93a1a1; }                .line.focus .hljs-keyword, .line.focus .hljs-selector-tag, .line.focus .hljs-addition { color: #859900; }                .line.focus .hljs-number, .line.focus .hljs-string, .line.focus .hljs-meta .hljs-meta-string, .line.focus .hljs-literal, .line.focus .hljs-doctag, .line.focus .hljs-regexp { color: #2aa198; }                .line.focus .hljs-title, .line.focus .hljs-section, .line.focus .hljs-name, .line.focus .hljs-selector-id, .line.focus .hljs-selector-class { color: #268bd2; }                .line.focus .hljs-attribute, .line.focus .hljs-attr, .line.focus .hljs-variable, .line.focus .hljs-template-variable, .line.focus .hljs-class .hljs-title, .line.focus .hljs-type { color: #b58900; }                .line.focus .hljs-symbol, .line.focus .hljs-bullet, .line.focus .hljs-subst, .line.focus .hljs-meta, .line.focus .hljs-meta .hljs-keyword, .line.focus .hljs-selector-attr, .line.focus .hljs-selector-pseudo, .line.focus .hljs-link { color: #cb4b16; }                .line.focus .hljs-built_in, .line.focus .hljs-deletion { color: #dc322f; }                .line.focus .hljs-formula { background: #eee8d5; }                .line.focus .hljs-emphasis { font-style: italic; }                .line.focus .hljs-strong { font-weight: bold; }                .yellow-slide .line.focus:nth-child(2) { background: yellow; }    .reveal .slides section .code-presenting-annotation {        font-size: 70%;    }    .reveal .slides section .fragment.current-only {        visibility: visible;        display: none;    }    .reveal .slides section .fragment.current-only.current-fragment {        display: block;    }    .line {        display: block;    }    .line.focus {        /* opacity: 1.0; */    }.hljs {  background: none;}.reveal pre {  width: 98%;  margin: 0px;  box-shadow: none;}.reveal pre code {  font-size: 1.2em;  line-height: 1.2;  border-radius: 10px;  max-height: 60vh !important;  overflow: hidden !important;}@media (device-width: 100vw) and (device-height: 100vh) {  .reveal pre code {    max-height: 50vh !important;  }}#logo img {  max-height: 3.5em;  max-width: none;  min-width: 50px;}.reveal .slides section .code-presenting-annotation {  color: white;  background: black;  padding: 0px 15px;  border-radius: 15px;  opacity: 0.75 !important;  font-size: 50% !important;}</style><script>         if(window.location.search.match( /print-pdf-now/gi )) {           window.print();         }      </script></head><body>            <div class="reveal">        <!-- Any section element inside of this container is displayed as a slide -->        <div class="slides">            <section data-markdown="/markdown.md" data-separator="^?---?$" data-separator-vertical="^?--?$" data-separator-notes="note:" data-charset="utf-8">            </section>        </div>    </div>    <script src="libs/reveal.js/3.7.0/lib/js/head.min.js"></script>    <script src="libs/reveal.js/3.7.0/js/reveal.orig.js"></script><!--     <script src="libs/jquery/2.2.4/jquery.min.js"></script> -->    <script>        // More info https://github.com/hakimel/reveal.js#configuration        Reveal.initialize({                       controls: true,            controlsTutorial: true,            controlsLayout: 'bottom-right',            controlsBackArrows: 'faded',            progress: true,            slideNumber: false,            history: true,            keyboard: true,            overview: true,            center: true,            touch: true,            loop: false,            rtl: false,            shuffle: false,            fragments: true,            fragmentInURL: false,            embedded: false,            help: true,            showNotes: false,            autoPlayMedia: false,            autoSlide: 0,            autoSlideStoppable: true,            autoSlideMethod: Reveal.navigateNext,            defaultTiming: 120,            mouseWheel: false,            hideAddressBar: true,            previewLinks: false,            transition: 'default',            transitionSpeed: 'default',            backgroundTransition: 'default',            viewDistance: 3,            parallaxBackgroundImage: '',            parallaxBackgroundSize: '',            parallaxBackgroundHorizontal: null,            parallaxBackgroundVertical: null,            display: 'block',            // More info https://github.com/hakimel/reveal.js#dependencies            dependencies: [               // { src: 'libs/reveal.js/3.7.0/lib/js/classList.js', condition: function () { return !document.body.classList; } },                { src: 'libs/reveal.js/3.7.0/plugin/markdown/marked.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },                { src: 'libs/reveal.js/3.7.0/plugin/markdown/markdown.js', condition: function () { return !!document.querySelector('[data-markdown]'); } },               // { src: 'libs/reveal.js/3.7.0/plugin/highlight/highlight.js', async: true, callback: function () { hljs.initHighlightingOnLoad(); } },                                { src: 'libs/reveal.js/3.7.0/plugin/search/search.js', async: true },                { src: 'libs/reveal.js/3.7.0/plugin/zoom-js/zoom.js', async: true },                                                { src: 'libs/reveal.js/3.7.0/plugin/notes/notes.js', async: true },                { src: 'libs/reveal.js/3.7.0/plugin/chalkboard/chalkboard.js' },                                                { src: 'libs/reveal.js/3.7.0/plugin/chart/Chart.min.js' },                { src: 'libs/reveal.js/3.7.0/plugin/chart/csv2chart.js' },                { src: 'libs/reveal.js/3.7.0/plugin/embed-tweet/embed-tweet.js' },                { src: 'libs/reveal.js/3.7.0/plugin/menu/menu.js' },                                                { src: 'libs/reveal.js/3.7.0/plugin/math/math.js', async: true },                { src: 'libs/highlight.js/9.12.0/highlight.js', async: true },                { src: 'libs/reveal.js/3.7.0/plugin/title-footer/title-footer.js', async: true, callback: function() { title_footer.initialize(); } },                                                { src: 'libs/highlight.js/9.12.0/reveal-code-focus-1.0.0-mod.js',                  async: true,                  callback: function() {                    RevealCodeFocus();                  }                },                // { src: 'libs/reveal.js/3.7.0/plugin/reveal-code-focus/highlight.pack.js' },                // { src: 'libs/reveal.js/3.7.0/plugin/reveal-code-focus/reveal-code-focus.js', async: true, callback: function() { RevealCodeFocus(); } },               // {src: 'libs/reveal.js/3.7.0/plugin/line-numbers/line-numbers.js'}            ]            ,            keyboard: {                67: function () { RevealChalkboard.toggleNotesCanvas() },// toggle notes canvas when 'c' is pressed                66: function () { RevealChalkboard.toggleChalkboard() },// toggle chalkboard when 'b' is pressed                46: function () { RevealChalkboard.clear() },// clear chalkboard when 'DEL' is pressed                8: function () { RevealChalkboard.reset() },// reset chalkboard data on current slide when 'BACKSPACE' is pressed                68: function () { RevealChalkboard.download() },// downlad recorded chalkboard drawing when 'd' is pressed            },            math: {                mathjax: 'libs/reveal.js/3.7.0/plugin/math/MathJax.js',// mathjax: 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js',config: 'TeX-AMS_HTML-full'},            chart: {defaults: { global: { title: { fontColor: "#FFF" }, legend: {position: "bottom",labels: { fontColor: "#FFF" },},tooltips: {labels: { fontColor: "#FFF" },},}, scale: { scaleLabel: { fontColor: "#FFF" }, gridLines: { color: "#FFF", zeroLineColor: "#FFF" }, ticks: { fontColor: "#FFF" }, } },line: { borderColor: [ "rgba(20,220,220,.8)" , "rgba(220,120,120,.8)", "rgba(20,120,220,.8)" ], "borderDash": [ [5,10], [0,0] ] }, bar: { backgroundColor: [ "rgba(20,220,220,.8)" , "rgba(220,120,120,.8)", "rgba(20,120,220,.8)" ]}, pie: { backgroundColor: [ ["rgba(0,0,0,.8)" , "rgba(220,20,20,.8)", "rgba(20,220,20,.8)", "rgba(220,220,20,.8)", "rgba(20,20,220,.8)"] ]},radar: { borderColor: [ "rgba(20,220,220,.8)" , "rgba(220,120,120,.8)", "rgba(20,120,220,.8)" ]}, },            menu: {                // Specifies which side of the presentation the menu will                 // be shown. Use 'left' or 'right'.                side: 'left',                // Specifies the width of the menu.                // Can be one of the following:                // 'normal', 'wide', 'third', 'half', 'full', or                // any valid css length value                width: 'normal',                // Add slide numbers to the titles in the slide list.                // Use 'true' or format string (same as reveal.js slide numbers)                numbers: false,                // Specifies which slide elements will be used for generating                // the slide titles in the menu. The default selects the first                // heading element found in the slide, but you can specify any                // valid css selector and the text from the first matching                // element will be used.                // Note: that a section data-menu-title attribute or an element                // with a menu-title class will take precedence over this option                titleSelector: 'h1, h2, h3, h4, h5, h6',                // If slides do not have a matching title, attempt to use the                // start of the text content as the title instead                useTextContentForMissingTitles: false,                // Hide slides from the menu that do not have a title.                // Set to 'true' to only list slides with titles.                hideMissingTitles: false,                // Adds markers to the slide titles to indicate the                 // progress through the presentation. Set to 'false'                // to hide the markers.                markers: true,                // Specify custom panels to be included in the menu, by                // providing an array of objects with 'title', 'icon'                // properties, and either a 'src' or 'content' property.                // custom: false,                custom: [ ],                // Specifies the themes that will be available in the themes                // menu panel. Set to 'true' to show the themes menu panel                // with the default themes list. Alternatively, provide an                // array to specify the themes to make available in the                // themes menu panel, for example...                // [                //     { name: 'Black', theme: 'css/theme/black.css' },                //     { name: 'White', theme: 'css/theme/white.css' },                //     { name: 'League', theme: 'css/theme/league.css' }                // ]                themes: false,                // Specifies the path to the default theme files. If your                // presentation uses a different path to the standard reveal                // layout then you need to provide this option, but only                // when 'themes' is set to 'true'. If you provide your own                 // list of themes or 'themes' is set to 'false' the                 // 'themesPath' option is ignored.                themesPath: 'css/theme/',                // Specifies if the transitions menu panel will be shown.                // Set to 'true' to show the transitions menu panel with                // the default transitions list. Alternatively, provide an                // array to specify the transitions to make available in                // the transitions panel, for example...                // ['None', 'Fade', 'Slide']                transitions: false,                // Adds a menu button to the slides to open the menu panel.                // Set to 'false' to hide the button.                openButton: true,                // If 'true' allows the slide number in the presentation to                // open the menu panel. The reveal.js slideNumber option must                 // be displayed for this to take effect                openSlideNumber: false,                // If true allows the user to open and navigate the menu using                // the keyboard. Standard keyboard interaction with reveal                // will be disabled while the menu is open.                keyboard: true,                // Normally the menu will close on user actions such as                // selecting a menu item, or clicking the presentation area.                // If 'true', the sticky option will leave the menu open                // until it is explicitly closed, that is, using the close                // button or pressing the ESC or m key (when the keyboard                 // interaction option is enabled).                sticky: false,                // If 'true' standard menu items will be automatically opened                // when navigating using the keyboard. Note: this only takes                 // effect when both the 'keyboard' and 'sticky' options are enabled.                autoOpen: true,                // If 'true' the menu will not be created until it is explicitly                // requested by calling RevealMenu.init(). Note this will delay                // the creation of all menu panels, including custom panels, and                // the menu button.                delayInit: false,                // If 'true' the menu will be shown when the menu is initialised.                openOnInit: false,                // By default the menu will load it's own font-awesome library                // icons. If your presentation needs to load a different                // font-awesome library the 'loadIcons' option can be set to false                // and the menu will not attempt to load the font-awesome library.                loadIcons: false            },            chalkboard: { toggleChalkboardButton: { left: "60px", bottom: "30px", top: "auto", right: "auto" },toggleNotesButton: { left: "90px", bottom: "30px", top: "auto", right: "auto" },}        });           </script></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.9.0&quot;&gt;
    &lt;meta charset=&quot;utf-8&quot;&gt;

    &lt;title&gt;RegExp(正则表达式)&lt;/t
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>同一台电脑配置多个SSH</title>
    <link href="http://yoursite.com/2019/07/31/multiSSH/"/>
    <id>http://yoursite.com/2019/07/31/multiSSH/</id>
    <published>2019-07-30T16:00:00.000Z</published>
    <updated>2019-08-03T09:59:35.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置多个SSH"><a href="#配置多个SSH" class="headerlink" title="配置多个SSH"></a>配置多个SSH</h2><p>在工作中多访问公司的gitlab仓库，而在生活中又有自己的gayhub仓库<br>记录一下方便日后查找</p><hr><p>一般电脑中的SSH key 存放在 <code>～/.ssh</code>目录中 如果有配置过的话存在 <code>id_rsa</code> \ <code>id_rsa.pub</code> 私钥和公钥, 将公钥配置到需要的代码平台</p><p>生成SSH key</p><h3 id="本地配置多个ssh-key"><a href="#本地配置多个ssh-key" class="headerlink" title="本地配置多个ssh key"></a>本地配置多个ssh key</h3><ul><li><p>1、为公司生成一对秘钥ssh key  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">'yourEmail@xx.com'</span> -f ~<span class="regexp">/.ssh/gi</span>tlab_id_rsa</span><br></pre></td></tr></table></figure></li><li><p>2、为github生成一对秘钥ssh key  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  ssh-keygen -t rsa -C <span class="string">'yourEmail2@xx.com'</span> -f ~<span class="regexp">/.ssh/gi</span>thub_id_rsa</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 3、在~/.ssh目录下新建名称为`</span>config<span class="string">`的文件（无后缀名）。  用于配置多个不同的host使用不同的ssh key，常用内容如下：</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">  # gitlab</span><br><span class="line">  Host gitlab.planetmeican.com</span><br><span class="line">      HostName gitlab.planetmeican.com</span><br><span class="line">      Port <span class="number">2345</span></span><br><span class="line">      User git</span><br><span class="line">      PreferredAuthentications publickey</span><br><span class="line">      IdentityFile ~<span class="regexp">/.ssh/gi</span>tlab_id_rsa</span><br><span class="line">  # github</span><br><span class="line">  Host github.com</span><br><span class="line">      HostName github.com</span><br><span class="line">      PreferredAuthentications publickey</span><br><span class="line">      IdentityFile ~<span class="regexp">/.ssh/gi</span>thub_id_rsa</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="配置文件参数"><a href="#配置文件参数" class="headerlink" title="配置文件参数"></a>配置文件参数</h1><h1 id="Host-Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件"><a href="#Host-Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件" class="headerlink" title="Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件"></a>Host : Host可以看作是一个你要识别的模式，对识别的模式，进行配置对应的的主机名和ssh文件</h1><h1 id="port-端口号，一般不需要配置"><a href="#port-端口号，一般不需要配置" class="headerlink" title="port: 端口号，一般不需要配置"></a>port: 端口号，一般不需要配置</h1><h1 id="HostName-要登录主机的主机名"><a href="#HostName-要登录主机的主机名" class="headerlink" title="HostName : 要登录主机的主机名"></a>HostName : 要登录主机的主机名</h1><p>#PreferredAuthentications: 授权验证方式</p><h1 id="User-登录名"><a href="#User-登录名" class="headerlink" title="User : 登录名"></a>User : 登录名</h1><h1 id="IdentityFile-指明上面User对应的identityFile路径"><a href="#IdentityFile-指明上面User对应的identityFile路径" class="headerlink" title="IdentityFile : 指明上面User对应的identityFile路径"></a>IdentityFile : 指明上面User对应的identityFile路径</h1><p><code>`</code></p><ul><li>4、分别往gitlab和github上添加生成的公钥</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置多个SSH&quot;&gt;&lt;a href=&quot;#配置多个SSH&quot; class=&quot;headerlink&quot; title=&quot;配置多个SSH&quot;&gt;&lt;/a&gt;配置多个SSH&lt;/h2&gt;&lt;p&gt;在工作中多访问公司的gitlab仓库，而在生活中又有自己的gayhub仓库&lt;br&gt;记录一下方便日后查
      
    
    </summary>
    
      <category term="倒腾" scheme="http://yoursite.com/categories/%E5%80%92%E8%85%BE/"/>
    
      <category term="Note" scheme="http://yoursite.com/categories/%E5%80%92%E8%85%BE/Note/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>serverless了解</title>
    <link href="http://yoursite.com/2019/07/29/serverless/"/>
    <id>http://yoursite.com/2019/07/29/serverless/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2019-07-31T05:41:00.565Z</updated>
    
    <content type="html"><![CDATA[<h2 id="serverless了解"><a href="#serverless了解" class="headerlink" title="serverless了解"></a>serverless了解</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;serverless了解&quot;&gt;&lt;a href=&quot;#serverless了解&quot; class=&quot;headerlink&quot; title=&quot;serverless了解&quot;&gt;&lt;/a&gt;serverless了解&lt;/h2&gt;
      
    
    </summary>
    
      <category term="server" scheme="http://yoursite.com/categories/server/"/>
    
    
      <category term="倒腾" scheme="http://yoursite.com/tags/%E5%80%92%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>react-redux中Provider、connect</title>
    <link href="http://yoursite.com/2019/07/29/provider&amp;&amp;connect/"/>
    <id>http://yoursite.com/2019/07/29/provider&amp;&amp;connect/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2019-08-03T09:45:33.792Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-redux中Provider"><a href="#react-redux中Provider" class="headerlink" title="react-redux中Provider"></a>react-redux中Provider</h2><p><a href="https://www.cnblogs.com/sameen/p/9182925.html" target="_blank" rel="noopener">详情</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-redux中Provider&quot;&gt;&lt;a href=&quot;#react-redux中Provider&quot; class=&quot;headerlink&quot; title=&quot;react-redux中Provider&quot;&gt;&lt;/a&gt;react-redux中Provider&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
      <category term="Note" scheme="http://yoursite.com/categories/React/Note/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>NPM 参数</title>
    <link href="http://yoursite.com/2019/07/29/npmParams/"/>
    <id>http://yoursite.com/2019/07/29/npmParams/</id>
    <published>2019-07-28T16:00:00.000Z</published>
    <updated>2019-08-03T09:43:44.955Z</updated>
    
    <content type="html"><![CDATA[<h2 id="npm-参数"><a href="#npm-参数" class="headerlink" title="npm 参数"></a>npm 参数</h2><p>npm install -g webpack<br>npm install prop-types –save-dev</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;npm-参数&quot;&gt;&lt;a href=&quot;#npm-参数&quot; class=&quot;headerlink&quot; title=&quot;npm 参数&quot;&gt;&lt;/a&gt;npm 参数&lt;/h2&gt;&lt;p&gt;npm install -g webpack&lt;br&gt;npm install prop-types –save
      
    
    </summary>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Skill/"/>
    
      <category term="前端" scheme="http://yoursite.com/categories/Skill/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Node" scheme="http://yoursite.com/categories/Skill/%E5%89%8D%E7%AB%AF/Node/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Git 笔记</title>
    <link href="http://yoursite.com/2019/07/28/gitNote/"/>
    <id>http://yoursite.com/2019/07/28/gitNote/</id>
    <published>2019-07-27T16:00:00.000Z</published>
    <updated>2019-08-03T09:19:28.276Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-常用的命令笔记"><a href="#Git-常用的命令笔记" class="headerlink" title="Git 常用的命令笔记"></a>Git 常用的命令笔记</h2><p>Commitizen是一个撰写合格 Commit message 的工具。 </p><ul><li>本地分支重命名</li></ul><p>git branch -m old new</p><ul><li><p>git checkout的用法</p><p>git checkout  // 不跟参数，则对工作区进行检查 可以返回工作区文件的状态<br>git checkout -b 分支名 // 切换到对应分支 如果没有则新建一条分支<br>git checkout -B 分支名 // 强制切换分支 如果存在同名分支会发生覆盖<br>git checkout commit_id(hash) // 切换到对应的commit版本 （分离头指针）<br>  //此时的HEAD不指向分支，指向对应的commit_id 通过 git checkout master 切回分支</p><p><a href="https://www.cnblogs.com/hutaoer/archive/2013/05/07/git_checkout.html" target="_blank" rel="noopener">checkout命令详解参考</a></p></li><li><p>撤回 add/commit</p><ul><li><p>将add到暂存区后的提交撤回<br>git reset head 文件名</p></li><li><p>修改commit标注<br>commit -m “aaaa” // 提交一个commit<br>git commit –amend =&gt; 开启vim编辑器 编辑后保存退出</p></li><li>撤回commit<br>git reset –soft commit_id // 撤回commit 到commit_id soft 只是撤回commit 本地文件不会修改<br>git reset –hard commit_id // 撤回commit 到commit_id hard 只是撤回commit 本地文件回退</li></ul></li><li><p>添加/删除远程分支</p><ul><li><p>将本地分支推送到远程分支上，如果远程分支不存在，则创建此远程分支</p><p>git push origin 本地分支名:远程分支名</p><p>$ git push origin test:master         // 提交本地test分支作为远程的master分支<br>$ git push origin test:test           // 提交本地test分支作为远程的test分支<br>//好像只写这一句，远程的github就会自动创建一个test分支</p></li><li><p>如果想删除远程的分支呢？类似于上面，如果:左边的分支为空，那么将删除:右边的远程的分支。<br>git push origin :远程分支名(你要删除的远程分支名)</p></li></ul></li><li><p>git reflog<br>可以显示已删除的操作</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git-常用的命令笔记&quot;&gt;&lt;a href=&quot;#Git-常用的命令笔记&quot; class=&quot;headerlink&quot; title=&quot;Git 常用的命令笔记&quot;&gt;&lt;/a&gt;Git 常用的命令笔记&lt;/h2&gt;&lt;p&gt;Commitizen是一个撰写合格 Commit message 的
      
    
    </summary>
    
      <category term="Skill" scheme="http://yoursite.com/categories/Skill/"/>
    
      <category term="Note" scheme="http://yoursite.com/categories/Skill/Note/"/>
    
      <category term="Git" scheme="http://yoursite.com/categories/Skill/Note/Git/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>js基本数据类型和引用类型的区别</title>
    <link href="http://yoursite.com/2018/07/30/type/"/>
    <id>http://yoursite.com/2018/07/30/type/</id>
    <published>2018-07-30T07:01:13.000Z</published>
    <updated>2018-08-09T08:59:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Js-基本数据类型"><a href="#Js-基本数据类型" class="headerlink" title="Js 基本数据类型"></a>Js 基本数据类型</h2><p>js基本数据类型包括：undefined,null,number,boolean,string.基本数据类型是按值访问的，就是说我们可以操作保存在变量中的实际的值  </p><h3 id="1-基本数据类型的值是不可改变的"><a href="#1-基本数据类型的值是不可改变的" class="headerlink" title="1.基本数据类型的值是不可改变的"></a>1.基本数据类型的值是不可改变的</h3><p> 任何方法都无法改变一个基本类型的值是不可改变的，比如一个字符串：<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"change"</span>;</span><br><span class="line">name.substr();<span class="comment">//hang</span></span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//change</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="string">"hello"</span>;</span><br><span class="line">s.toUpperCase()<span class="comment">//HELLO;</span></span><br><span class="line"><span class="built_in">console</span>.log(s)<span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p><p> 通过这两个例子， 我们原来发现定义的变量name 的值始终没有发生改变，而调用substr() 和 toUpperCase() 方法后返回的是一个新的字符串，跟原先定义的变量name 并没有关系  </p><p> 或许有人会有一下的疑问， 看代码：   </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Js-基本数据类型&quot;&gt;&lt;a href=&quot;#Js-基本数据类型&quot; class=&quot;headerlink&quot; title=&quot;Js 基本数据类型&quot;&gt;&lt;/a&gt;Js 基本数据类型&lt;/h2&gt;&lt;p&gt;js基本数据类型包括：undefined,null,number,boolean,s
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>性能优化之浏览器篇</title>
    <link href="http://yoursite.com/2018/07/20/Better/"/>
    <id>http://yoursite.com/2018/07/20/Better/</id>
    <published>2018-07-20T01:20:38.000Z</published>
    <updated>2018-07-21T00:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="把-Css-放在head-中加载"><a href="#把-Css-放在head-中加载" class="headerlink" title="把 Css 放在head 中加载"></a>把 Css 放在head 中加载</h2><blockquote><p>在浏览器解析完head 部分后、让浏览器知道需要引入哪些css文件，开始并行的去下载css资源，一边下载Css文件一边解析Html, 能够使页面更早的开始渲染  </p></blockquote><ul><li>让页面更早的开始渲染、避免闪屏  （DOM 结构先加载出来，css慢了一拍 页面重新渲染）</li><li>最好能包含关键渲染路径的样式、首页的样式应该尽快的完成加载、提高用户体验  </li></ul><h2 id="JS放在-body-标签结束前加载"><a href="#JS放在-body-标签结束前加载" class="headerlink" title="JS放在 body 标签结束前加载"></a>JS放在 body 标签结束前加载</h2><blockquote><p>js 资源的加载会阻塞 HTML 的解析 和 Css的渲染</p></blockquote><h2 id="不使用CSS-表达式"><a href="#不使用CSS-表达式" class="headerlink" title="不使用CSS 表达式"></a>不使用CSS 表达式</h2><blockquote><p>看似强大， 实际性能开销很大，可能导致页面卡顿  </p></blockquote><h2 id="用外链的方式引入css-和-js"><a href="#用外链的方式引入css-和-js" class="headerlink" title="用外链的方式引入css 和 js"></a>用外链的方式引入css 和 js</h2><ul><li>通过使用外链可以减少html 文件的体积  </li><li>作为外链文件、Css/Js 可以作为静态资源、通过合理的利用浏览器的缓存对需要的文件进行缓存； 在第二次访问时可以加快页面的加载速度  </li></ul><h2 id="不要重复加载JS"><a href="#不要重复加载JS" class="headerlink" title="不要重复加载JS"></a>不要重复加载JS</h2><ul><li>在IE中，例如在加载一个jquery以后再加载一个jquery，仍然是算作两个不同的请求，不能发挥缓存的优势  </li><li>重复加载js意味着更长的JS执行时间  </li></ul><h2 id="用-Get-方式发起-Ajax-请求"><a href="#用-Get-方式发起-Ajax-请求" class="headerlink" title="用 Get 方式发起 Ajax 请求"></a>用 Get 方式发起 Ajax 请求</h2><ul><li>Get 方式可以缓存  </li><li><p>如果是获取信息 Get 更加语义化  </p><p>如果是提交数据 使用Post 更加语义化  </p></li></ul><h2 id="组件延迟加载"><a href="#组件延迟加载" class="headerlink" title="组件延迟加载"></a>组件延迟加载</h2><blockquote><p>规划页面中引用的姿态资源加载顺序、优先级的能力</p></blockquote><ul><li><p>保障关键页面资源的优先加载: 浏览器的并发数限制  </p><blockquote><p>在同一个域名下面，一般现代浏览器的并发数为6 </p></blockquote></li><li>按需加载 Lazyload 典型： 电商网站  <blockquote><p>在图片比较多的电商网站中，lazyload 十分实用 data-src -&gt; src  </p></blockquote></li></ul><h2 id="避免在页面中使用iFrame"><a href="#避免在页面中使用iFrame" class="headerlink" title="避免在页面中使用iFrame"></a>避免在页面中使用iFrame</h2><ul><li>会阻塞父文档的 <code>onload</code> 事件  </li><li>即使是空白iFrame 也比较耗时</li></ul><h2 id="减少COOKIE体积"><a href="#减少COOKIE体积" class="headerlink" title="减少COOKIE体积"></a>减少COOKIE体积</h2><ul><li>COOKIE每次请求都会全都带上<br><a href="https://segmentfault.com/a/1190000004556040" target="_blank" rel="noopener">COOKIE了解更多</a>   <blockquote><p>每次请求跟主文档相关的信息，所有的cookie都会带上  </p></blockquote></li></ul><h2 id="减少-JS-中的-DOM-访问"><a href="#减少-JS-中的-DOM-访问" class="headerlink" title="减少 JS 中的 DOM 访问"></a>减少 JS 中的 DOM 访问</h2><blockquote><p>JS中对DOM 的访问是不可避免的, 但可以进行一下优化  </p></blockquote><ul><li>对于查找到的元素， 先将其缓存在变量中  </li><li>节点增加时合理利用 <code>DocumentFragment</code>  </li><li>不要用JS 去频繁修改样式</li></ul><h2 id="使用常见的图片优化手段"><a href="#使用常见的图片优化手段" class="headerlink" title="使用常见的图片优化手段"></a>使用常见的图片优化手段</h2><blockquote><p>相比代码， 图片的体积很大  </p></blockquote><h2 id="不要在HTML中缩放图片"><a href="#不要在HTML中缩放图片" class="headerlink" title="不要在HTML中缩放图片"></a>不要在HTML中缩放图片</h2><p>在实际中使用什么尺寸的图片就提供多大尺寸的图片  </p><ul><li>徒增渲染开销， 提供适当尺寸即可  <h2 id="不要把图片的src置空"><a href="#不要把图片的src置空" class="headerlink" title="不要把图片的src置空"></a>不要把图片的src置空</h2></li><li>在主流浏览器中 IE、Chrome、FireFox 都会引发指向当前主文档的额外请求</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;把-Css-放在head-中加载&quot;&gt;&lt;a href=&quot;#把-Css-放在head-中加载&quot; class=&quot;headerlink&quot; title=&quot;把 Css 放在head 中加载&quot;&gt;&lt;/a&gt;把 Css 放在head 中加载&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>RegExp 正则表达式</title>
    <link href="http://yoursite.com/2018/07/18/regExp/"/>
    <id>http://yoursite.com/2018/07/18/regExp/</id>
    <published>2018-07-18T01:47:21.000Z</published>
    <updated>2019-08-03T09:40:57.089Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RegRxp-正则表达式"><a href="#RegRxp-正则表达式" class="headerlink" title="RegRxp(正则表达式)"></a>RegRxp(正则表达式)</h1><blockquote><p>简化对字符串的操作  </p></blockquote><p>正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等</p><h2 id="什么是正则？"><a href="#什么是正则？" class="headerlink" title="什么是正则？"></a>什么是正则？</h2><p>规则、模式; 强大的字符串匹配的工具  </p><ul><li><p>风格<br>js风格: const reg = new RegExp(‘a’, i)<br>perl风格: const reg = /a/i  </p></li><li><p>转义字符  </p><p>|    转义字符    | 说明 |<br>| ———- | — |<br>| \d |  数字 [0-9]|<br>|\|斜杠 |<br>|\n|换行 |<br>|\w|英文 数字 下划线 [a-z0-9_]|<br>|\s|空格|<br>|\D|除了数字 [^0-9]|<br>|\W|非数字 字母 下划线 [^z-a0-9_]|<br>|\S|非空白字符|</p></li></ul><ul><li><p>特殊字符(元字符)  </p><ul><li><p>[] 方括号   </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//  [abc] 表示a或者b或者c </span></span><br><span class="line"><span class="keyword">const</span> re = <span class="regexp">/[abc]pc/g</span></span><br><span class="line"><span class="comment">// 范围匹配</span></span><br><span class="line">[a-z] [<span class="number">0</span><span class="number">-9</span>] </span><br><span class="line">[^a-z]  <span class="comment">// 匹配非英文部分</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>限定符(量词)  </p><ul><li>基本形式： {n}表示出现的次数  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 8位电话号码  </span><br><span class="line">/[1-9]\d&#123;7&#125;/        // 以非零数字开头后面八位随意</span><br></pre></td></tr></table></figure><ul><li><p>表示出现次数范围： {n, m}  表示出现最少n次 最多m次  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">      /[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">4</span>, <span class="number">10</span>&#125;/  <span class="comment">// QQ 正则</span></span><br><span class="line">    <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - 不限次数：&#123;n, &#125; 表示最少n次， 最多不限  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    . 任意字符  </span></span><br><span class="line"><span class="string">    *:  =&gt; &#123;0, &#125; 任意次  </span></span><br><span class="line"><span class="string">    +: 若干 =&gt; &#123;1, &#125; 最少一次 最多不限  </span></span><br><span class="line"><span class="string">    ?: 最少零次 最多一次 =&gt; &#123;0, 1&#125;  </span></span><br><span class="line"><span class="string">    ^: 行首  </span></span><br><span class="line"><span class="string">    $: 行尾  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  `</span><span class="string">``</span>js</span><br><span class="line">    (<span class="number">0</span>\d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-)?[<span class="number">1</span><span class="number">-9</span>]\d&#123;<span class="number">7</span>&#125;  <span class="comment">// 固话区号  010-2473544</span></span><br><span class="line">  <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 方法  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  - search  返回匹配的位置</span></span><br><span class="line"><span class="string">  - match 把所有匹配的东西都提取出来  </span></span><br><span class="line"><span class="string">  - replace 字符串替换,替换所有匹配的字符串，返回替换以后的字符串  </span></span><br><span class="line"><span class="string">  - test   检验字符串是否符合正则 返回Boolean </span></span><br><span class="line"><span class="string">    &gt; 特性 只要字符串一部分符合要求就返回true  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>js</span><br><span class="line">      <span class="comment">// 校验邮箱</span></span><br><span class="line">      <span class="keyword">const</span> email = <span class="string">'你好啊heiliu@Gmail.com'</span></span><br><span class="line">      <span class="keyword">const</span> re = <span class="regexp">/\w+@[a-z0-9]+\.[a-z]+/</span></span><br><span class="line">      re.test(email)  <span class="comment">// 后半部分符合 返回 true  </span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> re1 = <span class="regexp">/^\w+@[a-z0-9]+\.[a-z]+$/</span> <span class="comment">// 限制首尾</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="应用例子"><a href="#应用例子" class="headerlink" title="应用例子"></a>应用例子</h2><ul><li>查找字符串中的数字并返回  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//  查找字符串中的数字  </span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">'123ask32lks,alf21lksa12e45l3'</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/\d+/g</span>    <span class="comment">// global</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.match(reg))</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">- 敏感词过滤  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">  <span class="comment">// replace 的用例</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/匹配|出来/</span>;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">'把所有匹配的东西都提取出来 '</span></span><br><span class="line">  <span class="built_in">console</span>.log(str.replace(reg, <span class="string">'***'</span>))  <span class="comment">// 把所有***的东西都提取***</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RegRxp-正则表达式&quot;&gt;&lt;a href=&quot;#RegRxp-正则表达式&quot; class=&quot;headerlink&quot; title=&quot;RegRxp(正则表达式)&quot;&gt;&lt;/a&gt;RegRxp(正则表达式)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;简化对字符串的操作  &lt;/p&gt;
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Note" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/Note/"/>
    
    
      <category term="javaScript" scheme="http://yoursite.com/tags/javaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue组件通信</title>
    <link href="http://yoursite.com/2018/07/15/VueComponentsConnect-md/"/>
    <id>http://yoursite.com/2018/07/15/VueComponentsConnect-md/</id>
    <published>2018-07-15T01:47:21.000Z</published>
    <updated>2019-07-31T05:51:14.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><blockquote><p>(Component) 是 Vue.js最强大的功能之一。组件可以扩展，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p></blockquote><h1 id="通信类型"><a href="#通信类型" class="headerlink" title="通信类型"></a>通信类型</h1><h2 id="父组件与子组件通信"><a href="#父组件与子组件通信" class="headerlink" title="父组件与子组件通信"></a>父组件与子组件通信</h2><ul><li><p>父组件给子组件传递数据  </p><p>  <code>props</code>: 使用props，父组件可以使用props向子组件传递数据  </p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 父组件 </span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;child :msg=<span class="string">"message"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    </span></span><br><span class="line"><span class="regexp">import child from './</span>child.vue<span class="string">';</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">    components: &#123;</span></span><br><span class="line"><span class="string">        child</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    data () &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">            message: '</span>father message<span class="string">';</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件</span></span><br><span class="line">  &lt;template&gt;</span><br><span class="line">      &lt;div&gt;&#123;&#123;msg&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>template&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// props 另一种写法, 不声明类型与默认值</span></span><br><span class="line">  <span class="comment">// props: ['msg']</span></span><br><span class="line">      props: &#123;</span><br><span class="line">          msg: &#123;</span><br><span class="line">              type: <span class="built_in">String</span>,</span><br><span class="line">              required: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">```  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">- 子组件向父组件通信  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&gt; 在Vue 中子组件一般不具有操作数据和处理事件的权利，所有的数据和事件的处理都要交给父组件进行操作  </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">**方法一 :** 在子组件中通过$emit()将组件内部的时间传递给父组件的事件进行   </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">```js  </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 父组件</span></span><br><span class="line"><span class="regexp">&lt;template&gt;</span></span><br><span class="line"><span class="regexp">&lt;child @msgFunc="func"&gt;&lt;/</span>child&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">import child from './</span>child.vue<span class="string">';</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">components: &#123;</span></span><br><span class="line"><span class="string">    child</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">methods: &#123;</span></span><br><span class="line"><span class="string">    func (msg) &#123;</span></span><br><span class="line"><span class="string">        console.log(msg);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 子组件  </span></span><br><span class="line"><span class="string">&lt;template&gt;</span></span><br><span class="line"><span class="string">&lt;button @click="handleClick"&gt;点我&lt;/button&gt;</span></span><br><span class="line"><span class="string">&lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">export default &#123;</span></span><br><span class="line"><span class="string">props: &#123;</span></span><br><span class="line"><span class="string">    msg: &#123;</span></span><br><span class="line"><span class="string">        type: String,</span></span><br><span class="line"><span class="string">        required: true</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br><span class="line"><span class="string">methods () &#123;</span></span><br><span class="line"><span class="string">    handleClick () &#123;</span></span><br><span class="line"><span class="string">        // 提交出去的处理方法的名称与父组件接收的需一致</span></span><br><span class="line"><span class="string">        this.$emit('</span>msgFunc<span class="string">');</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;  </span></span><br><span class="line"><span class="string">```  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**方法二:** 通过修改父组件传递的props来修改父组件数据  </span></span><br><span class="line"><span class="string">&gt; 这种方法只能在父组件传递一个引用变量时可以使用，字面变量无法达到相应效果。因为饮用变量最终无论是父组件中的数据还是子组件得到的props中的数据都是指向同一块内存地址，所以修改了子组件中props的数据即修改了父组件的数据。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 但是并不推荐这么做，并不建议直接修改props的值，如果数据是用于显示修改的，在实际开发中我经常会将其放入data中，在需要回传给父组件的时候再用事件回传数据。这样做保持了组件独立以及解耦，不会因为使用同一份数据而导致数据流异常混乱，只通过特定的接口传递数据来达到修改数据的目的，而内部数据状态由专门的data负责管理  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 兄弟组件进行通信  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; 刚开始学习使用Vue时, 在Vue项目中的两个兄弟组件之间如果要进行通信， 通常会通过一个父组件进行数据请求再给子组件传递数据。    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- Vuex 是官方推荐的状态管理方案, 不过如果只是中小型项目，状态管理也没有很复杂的话，使用 Vuex 有种杀鸡用牛刀的感觉    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- Vue 官方推荐使用一个 Vue 实例作为中央事件总线, 即 `EventBus`  ,在需要使用的地方import该Bus   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  &gt; EventBus 解决了兄弟组件之间的事件传递问题，它的本质是订阅发布者模式，同一个事件发布组件发布了，订阅组件就能获得事件的改变摆脱了兄弟组件之间传值需要父组件转达，Vue事件实例，作为中间者不在页面上显示且具有vue的API 如 emit on   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```js  </span></span><br><span class="line"><span class="string">    // bus.js =&gt; new 一个 Vue 实例</span></span><br><span class="line"><span class="string">    import Vue from '</span>vue<span class="string">'</span></span><br><span class="line"><span class="string">    export default new Vue()  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // clickComponent.vue 相当于发布者, 在需要的组件中订阅就能进行通信</span></span><br><span class="line"><span class="string">    &lt;template&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;a href="#"class="click" :data-index="index" @click.prevent="doClick($event)"&gt;点我&lt;/a&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    import Bus from '</span>@/common/bus.js<span class="string">'</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">      props: &#123;</span></span><br><span class="line"><span class="string">        index: Number</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      methods: &#123;</span></span><br><span class="line"><span class="string">        doClick (event) &#123;</span></span><br><span class="line"><span class="string">           // console.log(event.target.dataset.index)</span></span><br><span class="line"><span class="string">           Bus.$emit('</span>getTarget<span class="string">', event.target.dataset.index)</span></span><br><span class="line"><span class="string">          //  this.$emit('</span>global: getTarget<span class="string">', event.target.dataset.index)</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // showComponents.vue 另一个兄弟组件 进行订阅</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;template&gt;</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123;html&#125;&#125;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    &lt;/template&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;script&gt;</span></span><br><span class="line"><span class="string">    import Bus from '</span>@/common/bus.js<span class="string">'</span></span><br><span class="line"><span class="string">    export default &#123;</span></span><br><span class="line"><span class="string">      data () &#123;</span></span><br><span class="line"><span class="string">        return &#123;</span></span><br><span class="line"><span class="string">          html: '</span>还没有点击<span class="string">'</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &#125;,</span></span><br><span class="line"><span class="string">      created () &#123;</span></span><br><span class="line"><span class="string">         Bus.$on('</span>getTarget<span class="string">', index =&gt; &#123;</span></span><br><span class="line"><span class="string">           this.html = `第$&#123;index&#125;个元素`</span></span><br><span class="line"><span class="string">         &#125;)</span></span><br><span class="line"><span class="string">        //this.$on('</span>global: getTarget<span class="string">', index =&gt; &#123;</span></span><br><span class="line"><span class="string">       //   this.html = `第$&#123;index&#125;个元素`</span></span><br><span class="line"><span class="string">       // &#125;)</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &lt;/script&gt;</span></span><br><span class="line"><span class="string">```  </span></span><br><span class="line"><span class="string">  在node中有一个 `vue-event-proxy` npm包能够实现与EventBus同样的功能，需要安装该npm包, 并且在main.js中进行`引入 `  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```js</span></span><br><span class="line"><span class="string">  import EventProxy from '</span>vue-event-proxy<span class="string">'</span></span><br><span class="line"><span class="string">  Vue.use(EventProxy)   // 激活使用</span></span><br><span class="line"><span class="string">  // 完成后即可以使用上面组件中js注释部分的代码代替Bus代码</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;(Component) 是 Vue.js最强大的功能之一。组件可以扩展，封装可重用的代码。在较高层面上，组件是自定
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/vue/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="http://yoursite.com/2018/07/15/sorts/"/>
    <id>http://yoursite.com/2018/07/15/sorts/</id>
    <published>2018-07-15T01:47:21.000Z</published>
    <updated>2019-07-31T03:49:57.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h1><pre><code>如下数字: 35 99 18 76 12  </code></pre><ul><li><p>桶排序<br>  有[100] for初始化数组<br>  将数字放到相应的位置  </p><p>  <strong>思想</strong>： </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">    利用数组的下标是有序的,待排序的数字大小在下标的范围内，当数组下标等于要排序的数组时</span><br><span class="line">    用待排序的数字坐桶的下标 给相应项+1 类似于做标记的</span><br><span class="line">    myIdea:当下标等于待排序的数字大小 即输出下标 相当于输出较小的数字 </span><br><span class="line">    ```  </span><br><span class="line"></span><br><span class="line">    **时间复杂度:**  </span><br><span class="line">       时间复杂度 循环  </span><br><span class="line">       O(M+N) 一重循环最大值99 100，又一重循环N，  </span><br><span class="line">       之后又有一层循环M 有值的桶子  </span><br><span class="line">       嵌套循环 &gt;= 0 1 2 3有限的，&lt;N   M+N  </span><br><span class="line">         多层循环是最花时间M+N  </span><br><span class="line">         O(M+N+M+N)=O(2*(M+N))  O(M+N)</span><br><span class="line"> </span><br><span class="line">    **缺点:** 占物理内存，因为要分配M个元素的数组  </span><br><span class="line">        </span><br><span class="line">- 冒泡排序  </span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">// 冒泡排序 </span><br><span class="line">// 思想: 比较相邻的元素。如果第一个比第二个大，就交换两数顺序  </span><br><span class="line">const source_arr = [35,18, 99, 18, 76, 12];</span><br><span class="line">function bubbleSort(arr) &#123;</span><br><span class="line">    const len = arr.length;</span><br><span class="line">    for (let i = 0; i &lt; len; i++) &#123;</span><br><span class="line">        for (let j = 0; j &lt; len - 1 - i; j++) &#123;</span><br><span class="line">            if (arr[j] &gt; arr[j+1]) &#123;        // 相邻元素两两对比</span><br><span class="line">                let temp = arr[j+1];        // 元素交换</span><br><span class="line">                arr[j+1] = arr[j];</span><br><span class="line">                arr[j] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br><span class="line">console.log(bubbleSort(source_arr));</span><br></pre></td></tr></table></figure></li><li><p>选择排序  </p><blockquote><p>第一重循环默认把 i 个作为最小值与后面 j 循环中的的数进行比较，也就是通过第二重循环与后面的值进行比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// n^2</span></span><br><span class="line"><span class="comment">// 找到数组中最小的值放在第一位，第二小的放在第二位...</span></span><br><span class="line"><span class="comment">// 基址查询</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SelectSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = arr.length</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> minIndex = i</span><br><span class="line">    <span class="comment">// 如果已经选择了， 前面的就一定是有序的</span></span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> j = i; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span>( arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        <span class="comment">// 循环和默认的最小值进行比较， 如果更小纪录下标</span></span><br><span class="line">        minIndex = j</span><br><span class="line">        <span class="built_in">console</span>.log(i, j)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(minIndex !== i) &#123;</span><br><span class="line">      [arr[minIndex], arr[i]] = [arr[i], arr[minIndex]]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(SelectSort([<span class="number">45</span>,<span class="number">21</span>,<span class="number">45</span>,<span class="number">12</span>,<span class="number">56</span>,<span class="number">12</span>,<span class="number">67</span>,<span class="number">32</span>,<span class="number">98</span>]))</span><br></pre></td></tr></table></figure></blockquote></li><li><p>快排排序  </p><blockquote><p>因为采用了分治思想，所以快  形象的例子 三个数之间进行排序 a b c 再加递归  </p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 简单排序： 冒泡、选择、插入 时间复杂度都是 n^2</span></span><br><span class="line"><span class="comment">// 复杂排序： 快排、堆排、归并排序 时间复杂度都是 (log2^n)* n</span></span><br><span class="line"><span class="comment">// 分治</span></span><br><span class="line"><span class="comment">// 快排 log2(n)* n for循环 n次</span></span><br><span class="line">  <span class="comment">// 1. 随机选择一个数组中的一个数作为一个基准 一般是中点</span></span><br><span class="line">  <span class="comment">// 2. 其余数字跟他比较， 小的放左边 大的放右边</span></span><br><span class="line">  <span class="comment">// 3. 利用递归的思想， 将左右两边的数重复以上两步</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里是出口 当数组长度小于等于1的时候结束递归</span></span><br><span class="line">  <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length /<span class="number">2</span>)</span><br><span class="line">  <span class="comment">// 把中间基准值从数组提出来</span></span><br><span class="line">  pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>]  <span class="comment">// 选出相应位置的值</span></span><br><span class="line">  <span class="built_in">console</span>.log(pivot)</span><br><span class="line">  <span class="keyword">let</span> left = [], right = []</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>, len = arr.length ; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>( arr[i] &lt; pivot) &#123;</span><br><span class="line">      left.push(arr[i])</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      right.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> QuickSort(left).concat(pivot, QuickSort(right))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(QuickSort([<span class="number">85</span>, <span class="number">24</span>, <span class="number">63</span>, <span class="number">45</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">78</span>, <span class="number">56</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;算法题&quot;&gt;&lt;a href=&quot;#算法题&quot; class=&quot;headerlink&quot; title=&quot;算法题&quot;&gt;&lt;/a&gt;算法题&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;如下数字: 35 99 18 76 12  
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;桶排序&lt;br&gt;  有
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>【轻松集赞】写了个涉嫌混淆微信官方服务的小程序</title>
    <link href="http://yoursite.com/2018/06/13/thumbsUp/"/>
    <id>http://yoursite.com/2018/06/13/thumbsUp/</id>
    <published>2018-06-13T07:27:26.000Z</published>
    <updated>2018-06-13T07:27:26.000Z</updated>
    
    <content type="html"><![CDATA[<hr><p><img src="http://p9utic4op.bkt.clouddn.com/sx.png" alt="此处输入图片的描述">  </p><h3 id="发生背景："><a href="#发生背景：" class="headerlink" title="发生背景："></a>发生背景：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;随着现在国内的社交软件用户群体的不断扩大，商家打广告的方式（套路）也越来越多了，每次走在大街上都可以看到商家打出来广告牌，”朋友圈点赞超过30享受六折优惠”。在上一次和女盆友出去万达吃个晚饭，终于我们也被这个活动诱惑了一下下，作为口袋钱不多又想好好吃一顿的大三狗，看看望着桌子上一大盆烤鱼，还在犹豫要不要点一份小龙虾的女朋友，还是选择了拍照发朋友圈然后挨个去群里叫亲朋好友点赞，麻烦了一堆好友，真是不好意思。<br>&nbsp;&nbsp;&nbsp;&nbsp;吃饱喝足，两个人扶着腰走在路上炫’腹’、还是女盆友的提醒说，你不是会小程序吗，能不能写一个点赞的小程序来用。哎、还真是，我自己撸一个，说不定还能给其他人用。  </p><h3 id="初局雏形"><a href="#初局雏形" class="headerlink" title="初局雏形"></a>初局雏形</h3><h4 id="分析了一下小程序要的功能："><a href="#分析了一下小程序要的功能：" class="headerlink" title="分析了一下小程序要的功能："></a>分析了一下小程序要的功能：</h4><pre><code>1. 主要功能：点赞（想要多少赞就要多少赞）  2. 微信朋友圈部分功能    </code></pre><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>感觉这个小程序比较适合想要练手小程序和WeUI的盆友，所以细讲一点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;├── assets 小程序所需的images icon                 </span><br><span class="line">├── pages   页面目录          </span><br><span class="line">|   ├── welcome 欢迎页面      </span><br><span class="line">|   ├── index   内容发布操作页面</span><br><span class="line">|   ├── mian   &apos;朋友圈&apos; </span><br><span class="line">├── style   页面的样式 及weui</span><br><span class="line">└── app.js  小程序逻辑 全局参数</span><br><span class="line">└── app.wxss 小程序公共样式</span><br><span class="line">└── app.json   项目的配置</span><br></pre></td></tr></table></figure></p><p>需要注意的地方：微信朋友圈发布一张图片和多张图片图片宽高比例不一样  </p><h4 id="欢迎页面Welcome"><a href="#欢迎页面Welcome" class="headerlink" title="欢迎页面Welcome"></a>欢迎页面Welcome</h4><p>欢迎页的动画我很喜欢，也许是这一个小程序的亮点<br>   <img src="http://p9utic4op.bkt.clouddn.com/welcome_clip1.gif" alt="此处输入图片的描述"><br>   各位，请原谅我、我也不知道怎么就变成横向的了    </p><h3 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h3><ol><li>小程序在模拟器上实现一些复杂功能和界面效果时，及时在移动设备上进行效果查看，        避免移动端上达不到预期效果，ios和android有时候在样式的显示上有时也会有不同    </li><li></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;http://p9utic4op.bkt.clouddn.com/sx.png&quot; alt=&quot;此处输入图片的描述&quot;&gt;  &lt;/p&gt;
&lt;h3 id=&quot;发生背景：&quot;&gt;&lt;a href=&quot;#发生背景：&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>BFC 浅谈</title>
    <link href="http://yoursite.com/2018/06/13/BFC/"/>
    <id>http://yoursite.com/2018/06/13/BFC/</id>
    <published>2018-06-13T02:58:18.000Z</published>
    <updated>2018-06-13T02:58:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><blockquote><p>Block formatting context （块级格式化上下文）  </p></blockquote><p>页面文档由块<code>block</code>构成 每个<code>block</code>在页面上占据自己的位置<br>使用新的元素构建BFC overflow：hidden | auto | scroll； 只要不为<code>visible</code>新的空间<br>告诉浏览器，外面的环境影响不到我了 我重新来进行Block formatting 布局和定位  </p><p><strong>核心：</strong><br>    新的BFC，给出了新的不受外界影响的块级格式化环境<br>    block 块级-&gt; 页面的基础<br>    formatting context 格式化-&gt; 渲染</p><h3 id="浏览器构建文档树的时候-布局和定位元素"><a href="#浏览器构建文档树的时候-布局和定位元素" class="headerlink" title="浏览器构建文档树的时候 布局和定位元素"></a>浏览器构建文档树的时候 布局和定位元素</h3><p>网页的定位（大） 文档流正常，浮动，定位，flex，table<br>广义的定位 块级元素的定位 垂直的定位；行内元素 左右定位 通过内容来确定<br>狭义的定位：<br>float 浮动元素，在一行的开始或者结束<br>flex 弹性布局<br>position</p><p>BFC 在正常的文档流里面重建一个新的上下文环境  </p><h3 id="BFC的约束规则"><a href="#BFC的约束规则" class="headerlink" title="BFC的约束规则"></a>BFC的约束规则</h3><ul><li><p>一、在浏览器进行页面元素布局的时候 同一个BFC的两个相邻的Box的margin 会重叠，与方向无关  </p><blockquote><p>破坏规则 创建新的BFC Context上下文的概念   </p></blockquote><p>  如何创建BFC？=&gt;重新规划一个（独立）渲染区域</p><ul><li>根元素body，天然是一个BFC    </li><li>overflow:hidden;  </li><li>float 不为none  </li><li>display:inline-block | table-cell |table-caption  </li><li>position:absolute | fixed 只要不为static  <blockquote><p>好像只剩块级元素和行内元素不是BFC</p></blockquote></li></ul></li><li><p>二、<code>BFC</code>的高度，浮动元素也要参与计算  </p><blockquote><p>在元素<code>float</code>之后脱离了文档流没有办法计算确切高度，这种情况我们称之为高度塌陷。解决高度塌陷的前提就是<code>能识</code>别并<code>包含</code>到浮动元素。<strong>而<code>BFC</code>就有这个特性</strong>，所以BFC也可以计算浮动元素的高度。新建BFC让浮动元素也参与计算 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;padding: 0;margin: 0;&#125;</span><br><span class="line">        .par&#123;</span><br><span class="line">            border: 5px solid #fcc;</span><br><span class="line">            width: 300px;</span><br><span class="line">            /*这里的overflow并不是为了超出则隐藏，而是为了创建一个BFC*/</span><br><span class="line">            /* overflow: hidden; */</span><br><span class="line">            display: inline-block;</span><br><span class="line">        &#125;</span><br><span class="line">        .child&#123;</span><br><span class="line">            border: 5px solid #f66;  </span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line">            float: left;</span><br><span class="line">            /* clear: both; */</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 网页的定位（大） 文档流正常，浮动，定位，flex，table --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"par"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line">- 三、每个元素的左边，要与包含盒子的左边相接触</span><br><span class="line">- 四、BFC的区域不会与float box重叠  </span><br><span class="line">```html</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;padding: 0;margin: 0;&#125;</span><br><span class="line">        .aside&#123;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 150px;</span><br><span class="line">            background-color: #ff6666;</span><br><span class="line">        &#125;</span><br><span class="line">        .main&#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background: #ffcccc;</span><br><span class="line">            /* clear: left; */</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自适应两栏式布局 类似于flex：1；</span></span><br><span class="line"><span class="comment">    aside 和 main 处于同一BFC（body）下 </span></span><br><span class="line"><span class="comment">    BFC布局规则3 规则4 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">```   </span><br><span class="line">```html</span><br><span class="line">/*BFC在三栏式布局中的应用*/</span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        *&#123;padding: 0;margin: 0;&#125;</span><br><span class="line">        .container&#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">        .left,.right,.center&#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">        .left&#123;</span><br><span class="line">            background: pink;</span><br><span class="line">            float: left;</span><br><span class="line">            width: 180px;</span><br><span class="line">        &#125;</span><br><span class="line">        .right&#123;</span><br><span class="line">            background: lightblue;</span><br><span class="line">            width: 180px;</span><br><span class="line">            float: right;</span><br><span class="line">        &#125;</span><br><span class="line">        .center&#123;</span><br><span class="line">            background: yellow;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 三栏式布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 页面的结构与呈现效果不一致？想一下 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>Left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>Right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>Center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">**注意：**  </span><br><span class="line">&gt; 通过 overflow:hidden将元素转换为BFC，固然可以解决高度塌陷的问题，但是大范围的应用在布局上是肯定是行不通的，毕竟overflow会造成溢出隐藏的问题，特别是与JS交互的效果时。  </span><br><span class="line"></span><br><span class="line">那有没有一个更好的高度检测方法呢？</span><br><span class="line">答案是有的，就是我们经常用到的clearfix。  </span><br><span class="line">```css</span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">    content:'';</span><br><span class="line">    display:table;</span><br><span class="line">    clear:both</span><br><span class="line">&#125;</span><br><span class="line">.clearfix&#123;</span><br><span class="line">    *zoom:1;/* IE6,7不支持BFC，所以需要通过专有的CSS属性，触发hasLayout。*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p><a href="https://www.cnblogs.com/meierbao/p/6526247.html" target="_blank" rel="noopener">关于zoom:1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;Block formatting context （块级格式化上下文）  &lt;/p&gt;
&lt;/
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>如何手动实现一个New操作</title>
    <link href="http://yoursite.com/2018/06/13/new/"/>
    <id>http://yoursite.com/2018/06/13/new/</id>
    <published>2018-06-13T02:57:40.000Z</published>
    <updated>2018-06-13T02:57:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><hr><p>在所有的前端面试中常常喜欢考面试者如何手写一个new操作符，作为在准备秋招的大三党，我也要考虑这些。<br>那么我们先看看new操作符都干了什么事情，有哪些操作？通过下面的代码来进行思考：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新建一个类（构造函数）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Otaku</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="comment">// 自身的属性</span></span><br><span class="line">    <span class="keyword">this</span>.habit = <span class="string">'pk'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 给类的原型上添加属性和方法</span></span><br><span class="line">Otaku.prototype.strength = <span class="number">60</span>;</span><br><span class="line">Otaku.prototype.sayYourName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'I am '</span> + <span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化一个person对象</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Otaku(<span class="string">'乔峰'</span>,<span class="number">5000</span>);</span><br><span class="line">person.sayYourName();</span><br><span class="line"><span class="built_in">console</span>.log(person);<span class="comment">//打印出构造出来的实例</span></span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">![控制台打印结果](http://p9utic4op.bkt.clouddn.com/new.png)   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 解析  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">从控制台打印出来的结果我们可以看出new操作符大概做了一下几件事情：  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> 1. 返回（产生）了一个新的对象  </span></span><br><span class="line"><span class="string"> 2. 访问到了类Otaku构造函数里的属性  </span></span><br><span class="line"><span class="string"> 3. 访问到Otaku原型上的属性和方法  并且设置了this的指向（指向新生成的实例对象）</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">通过上面的分析展示，可以知道new团伙里面一定有Object的参与，不然对象的产生就有点说不清了。 先来边写写：  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="comment">// 需要返回一个对象 借助函数来实现new操作 </span></span><br><span class="line"><span class="comment">// 传入需要的参数： 类 + 属性</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Otaku(<span class="string">'乔峰'</span>,<span class="number">5000</span>);</span><br><span class="line"><span class="keyword">const</span> person1 = objectFactory(Otaku, <span class="string">'鸠摩智'</span>, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始来实现objectFactory 方法 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params">obj, name, age</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 这种方法将自身写死了 如此他只能构造以obj为原型，并且只有name 和 age 属性的 obj</span></span><br><span class="line"><span class="comment">// 在js中 函数因为arguments 使得函数参数的写法异常灵活，在函数内部可以通过arguments来获得函数的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arguements); <span class="comment">//&#123; '0': [Function: Otaku], '1': '鸠摩智', '2': 5000 &#125;</span></span><br><span class="line">     <span class="comment">// 通过arguments类数组打印出的结果，我们可以看到其中包含了构造函数以及我们调用objectfactory时传入的其他参数</span></span><br><span class="line">    <span class="comment">// 接下来就是要想如何得到其中这个构造函数和其他的参数</span></span><br><span class="line">    <span class="comment">// 由于arguments是类数组，没有直接的方法可以供其使用，我们可以有以下两种方法:</span></span><br><span class="line">    <span class="comment">// 1. Array.from(arguments).shift(); //转换成数组 使用数组的方法shift将第一项弹出</span></span><br><span class="line">    <span class="comment">// 2.[].shift().call(arguments); // 通过call() 让arguments能够借用shift方法</span></span><br><span class="line">    <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">const</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="comment">// 新建一个空对象 纯洁无邪</span></span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">// 接下来的想法 给obj这个新生对象的原型指向它的构造函数的原型  </span></span><br><span class="line">    <span class="comment">// 给构造函数传入属性，注意：构造函数的this属性</span></span><br><span class="line">    <span class="comment">// 参数传进Constructor对obj的属性赋值，this要指向obj对象</span></span><br><span class="line">    <span class="comment">// 在Coustructor内部手动指定函数执行时的this 使用call、apply实现</span></span><br><span class="line">    Constructor.call(obj,...args);</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 上面的代码注释太多，剔除注释以后的代码：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        obj.__proto__ = Conctructor.prototype;</span><br><span class="line">        Constructor.call(obj,...arguments);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">- 还有另外一种操作： </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myNew</span>(<span class="params">Obj,...args</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(Obj.prototype);<span class="comment">//使用指定的原型对象及其属性去创建一个新的对象</span></span><br><span class="line">  Obj.apply(obj,args); <span class="comment">// 绑定 this 到obj, 设置 obj 的属性</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 返回实例</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在所有的前端面试中常常喜欢考面试者如何手写一个new操作符，作为在准备秋招的大三党，我也要考虑这些。&lt;br&gt;那么我
      
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>WePY  上手</title>
    <link href="http://yoursite.com/2018/06/04/wepy/"/>
    <id>http://yoursite.com/2018/06/04/wepy/</id>
    <published>2018-06-04T10:25:56.000Z</published>
    <updated>2018-06-04T10:25:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="来自微信官方的小程序组件开发框架"><a href="#来自微信官方的小程序组件开发框架" class="headerlink" title="来自微信官方的小程序组件开发框架"></a>来自微信官方的小程序组件开发框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre><code>WePY (发音: /&apos;wepi/)是一款让小程序支持组件化开发的框架，通过预编译的手段让开发者可以选择自己喜欢的开发风格去开发小程序。  </code></pre><ul><li>类Vue开发风格</li><li>支持自定义组件开发</li><li>支持引入NPM包</li><li>支持Promise</li><li>支持ES2015+特性，如Async Functions</li><li>支持多种编译器，Less/Sass/Stylus/PostCSS、Babel/Typescript、Pug</li><li>支持多种插件处理，文件压缩，图片压缩，内容替换等</li><li>支持 Sourcemap，ESLint等</li><li>小程序细节优化，如请求列队，事件优化等</li></ul><h2 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h2><h3 id="安装（更新）wepy命令行工具"><a href="#安装（更新）wepy命令行工具" class="headerlink" title="安装（更新）wepy命令行工具"></a>安装（更新）wepy命令行工具</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install wepy-cli -g</span><br></pre></td></tr></table></figure><h3 id="生成开发实例"><a href="#生成开发实例" class="headerlink" title="生成开发实例"></a>生成开发实例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">npm init standard projectName</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">生成src的目录 开发在此目录进行开发</span></span><br><span class="line"><span class="string">### 安装依赖  </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">npm install</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">将所有项目和开发时（package.json）所需要的依赖进行安装</span></span><br><span class="line"><span class="string">### 开启实时编译</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">wepy build --watch</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">生成dist目录、并实时监听src目录下的修改且编译到dist目录中     </span></span><br><span class="line"><span class="string">### WePY项目目录结构</span></span><br></pre></td></tr></table></figure><blockquote><p>├── dist                   小程序运行代码目录（该目录由WePY的build指令自动编译生成，请不要直接修改该目录下的文件）<br>├── node_modules<br>├── src                    代码编写的目录（该目录为使用WePY后的开发目录）<br>|   ├── components       WePY组件目录（组件不属于完整页面，仅供完整页面或其他组件引用）<br>|   |   ├── com_a.wpy      可复用的WePY组件a<br>|   |   └── com_b.wpy      可复用的WePY组件b<br>|   ├── pages              WePY页面目录（属于完整页面）<br>|   |   ├── index.wpy      index页面（经build后，会在dist目录下的pages目录生成index.js、index.json、index.wxml和index.wxss文件）<br>|   |   └── other.wpy      other页面（经build后，会在dist目录下的pages目录生成other.js、other.json、other.wxml和other.wxss文件）<br>|        └── app.wpy            小程序配置项（全局数据、样式、声明钩子等；经build后，会在dist目录下生成app.js、app.json和app.wxss文件）<br>└── package.json           项目的package配置<br><code>`</code></p></blockquote><h3 id="开发者工具导入项目"><a href="#开发者工具导入项目" class="headerlink" title="开发者工具导入项目"></a>开发者工具导入项目</h3><p>使用微信开发者工具新建项目，本地开发选择生成的dist目录，会自动导入项目目录配置  </p><p><a href="https://tencent.github.io/wepy/document.html#/" target="_blank" rel="noopener">WePY官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;来自微信官方的小程序组件开发框架&quot;&gt;&lt;a href=&quot;#来自微信官方的小程序组件开发框架&quot; class=&quot;headerlink&quot; title=&quot;来自微信官方的小程序组件开发框架&quot;&gt;&lt;/a&gt;来自微信官方的小程序组件开发框架&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;&lt;a hr
      
    
    </summary>
    
      <category term="小程序" scheme="http://yoursite.com/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="小程序" scheme="http://yoursite.com/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序笔记总结</title>
    <link href="http://yoursite.com/2018/05/16/wxNote/"/>
    <id>http://yoursite.com/2018/05/16/wxNote/</id>
    <published>2018-05-16T08:15:42.000Z</published>
    <updated>2018-05-16T08:15:42.000Z</updated>
    
    <content type="html"><![CDATA[<hr><h3 id="小程序的项目架构"><a href="#小程序的项目架构" class="headerlink" title="小程序的项目架构"></a>小程序的项目架构</h3><ul><li>基础组件 </li><li>地图</li><li>视图容器  </li><li><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3></li></ul><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><h3 id="template-只支持wxml-wxss-模板-模块化不支持"><a href="#template-只支持wxml-wxss-模板-模块化不支持" class="headerlink" title="template 只支持wxml wxss 模板 模块化不支持"></a>template 只支持wxml wxss 模板 模块化不支持</h3><h3 id="wx-for-wx-key-wx-if"><a href="#wx-for-wx-key-wx-if" class="headerlink" title="wx:for wx:key wx:if"></a>wx:for wx:key wx:if</h3><h3 id="样式导入-和-模块引入"><a href="#样式导入-和-模块引入" class="headerlink" title="样式导入 和 模块引入"></a>样式导入 和 模块引入</h3><h3 id="数据缓存"><a href="#数据缓存" class="headerlink" title="数据缓存"></a>数据缓存</h3><pre><code>// 设置缓存 缓存是永久存在的 没有时效 上限最大不能超过10M// wx.setStorageSync (&quot;collect&quot;, true);// 修改缓存，同名wx.setStorageSync(&apos;key&apos;,{  game:&quot;风暴英雄&quot;,  developer:&apos;暴雪&apos;});// var postCollected=wx.getStorageSync(&quot;collected&quot;);</code></pre><p>  },<br>  collectionTap(event){<br>    let game = wx.getStorageSync(‘key’);<br>    console.log(game.developer);<br>  },<br>  shareTap(event){<br>    // wx.removeStorageSync(‘key’);<br>    // 清除所有缓存<br>    wx.clearStorageSync();<br>  },</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h3 id=&quot;小程序的项目架构&quot;&gt;&lt;a href=&quot;#小程序的项目架构&quot; class=&quot;headerlink&quot; title=&quot;小程序的项目架构&quot;&gt;&lt;/a&gt;小程序的项目架构&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;基础组件 &lt;/li&gt;
&lt;li&gt;地图&lt;/li&gt;
&lt;li&gt;视图容器  &lt;/
      
    
    </summary>
    
      <category term="微信" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1/"/>
    
    
      <category term="WXApp" scheme="http://yoursite.com/tags/WXApp/"/>
    
  </entry>
  
  <entry>
    <title>javascript函数</title>
    <link href="http://yoursite.com/2018/05/09/function_note/"/>
    <id>http://yoursite.com/2018/05/09/function_note/</id>
    <published>2018-05-09T15:33:46.000Z</published>
    <updated>2018-05-09T15:33:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><hr><p>函数用于指定对象的行为，在其中包含一组语句。用于代码复用、信息隐藏、和组合调用。  </p><h3 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h3><p>JavaScript 中的函数就是对象。函数对象连接到<code>Function.prototype</code>（该原型对象本身连接到<code>Object.prototype</code>）。每个函数对象在创建时会附加两个隐藏属性：<code>函数的上下文</code>和<code>实现函数行为的代码</code>。</p><p>函数对象在创建时也随配有一个<code>prototype</code>属性。它的值是一个拥有constructor属性且值即为该函数对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">因为函数是对象，所以可以像任何其他的值一样被使用。函数可以保存在变量、对象和数组中。函数可以被当做参数传递给其他函数，函数也可以再返回函数。函数也可以拥有方法。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">函数的与众不同之处在于可以被调用。  </span></span><br><span class="line"><span class="string">### 函数字面量  </span></span><br><span class="line"><span class="string">函数对象通过函数字面量来创建。</span></span><br><span class="line"><span class="string">函数字面量包含4部分，分别是：保留字 function、函数名、参数、花括号中的语句。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js</span><br><span class="line">    <span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">### 调用  </span></span><br><span class="line"><span class="string">调用一个函数会暂停当前函数的执行，传递控制权和参数给新函数。除了声明时定义的形式参数，还有两个附加参数：`</span><span class="keyword">this</span><span class="string">`和`</span><span class="built_in">arguments</span><span class="string">`。参数this在面向对象编程中非常重要，它的值取决于调用的模式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">实参和形参个数不匹配时，不会有运行时错误。实参过多时，超出的实参被忽略。形参过多时，缺失的值被替换为undefined。  </span></span><br><span class="line"><span class="string">- 方法调用模式  </span></span><br><span class="line"><span class="string">    当一个函数被保存为对象的一个属性时，我们称它为一个方法。当一个方法被调用时，`</span><span class="keyword">this</span>被绑定到该对象<span class="string">`,通过this可以对该对象的属性和方法进行调用和操作。  </span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>js</span><br><span class="line">    <span class="keyword">var</span> myObject = &#123;</span><br><span class="line">        text: hello,</span><br><span class="line">        say:<span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.text + msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    myObject.say(world);</span><br></pre></td></tr></table></figure></p><ul><li>函数调用模式<br>当一个函数并非一个对象的属性时，那么它就是被当做一个函数来调用的。<br>此时this被绑定到全局对象。即时是内部函数也会将this绑定到全局对象。this的指向问题 作用域不一样 this的指向就不一样,可以在函数内创建一个属性并赋值为this来解决这个问题,一般通过<code>var that = this</code>;  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    <span class="keyword">var</span> helper = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        that.value = add(that.value, that.value)</span><br><span class="line">    &#125;</span><br><span class="line">    helper()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myObject.double()</span><br><span class="line"><span class="built_in">console</span>.log(myObject.value) <span class="comment">//8</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    attachEvent: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// attachEvent函数的作用域</span></span><br><span class="line">    <span class="comment">// js 里面this总会指向什么</span></span><br><span class="line">    <span class="comment">// 对象的方法被执行时 this指向对象</span></span><br><span class="line">    <span class="comment">// console.log(this);</span></span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.staticElement.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 这个函数被执行时，并不是对象的方法，而是匿名函数，作为事件处理函数来执行，this会指向事件发生元素</span></span><br><span class="line">        <span class="comment">// this的指向跟函数的调用方式有关</span></span><br><span class="line">        <span class="comment">// this的指向问题 作用域不一样 this的指向就不一样</span></span><br><span class="line">        <span class="comment">// 作用域 事件的回调函数</span></span><br><span class="line">        <span class="comment">// console.log(this);</span></span><br><span class="line">        <span class="comment">// alert(that.value);</span></span><br><span class="line">        that.convertToEdit();</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">this</span>.filedElement.addEventListener(<span class="string">'keydown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 在事件发生的一刹那 会产生一个临时事件对象</span></span><br><span class="line">        <span class="built_in">console</span>.log(evt);</span><br><span class="line">        <span class="keyword">if</span> (evt.keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">            that.staticElement.innerHTML = <span class="keyword">this</span>.value;</span><br><span class="line">            <span class="built_in">console</span>.log(that.staticElement.innerHTML);</span><br><span class="line">            that.convertToText();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>构造器调用模式<br>JavaScript是一门基于原型继承的语言。对象可以直接从其他对象继承属性。该语言是无类型的。<br>如果在一个函数前面带上new来调用，那么背地里将会创建一个连接到该函数的prototype成员的新对象，同时this会被绑定到那个新对象上。  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造器函数</span></span><br><span class="line"><span class="keyword">var</span> Quo = <span class="function"><span class="keyword">function</span>(<span class="params">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.status = string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Que的所有实例提供一个公共方法</span></span><br><span class="line">Quo.prototype.getStatus = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.status</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="keyword">var</span> myQuo = <span class="keyword">new</span> Quo(<span class="string">'confused'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myQuo.getStatus()) <span class="comment">//confused</span></span><br></pre></td></tr></table></figure></li><li><p>Apply 调用模式<br><code>apply</code>方法让我们构建一个参数数组传递给调用函数。他也允许我们选择<code>this</code>的值。apply方法接受两个参数，第一个是要绑定给<code>this</code>的值，第二个是参数数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">        <span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">        <span class="keyword">var</span> sum = add.apply(<span class="literal">null</span>, arr)</span><br><span class="line">        <span class="built_in">console</span>.log(sum) <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> statusObject = &#123;</span><br><span class="line">            status: <span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> status = Quo.prototype.getStatus.apply(statusObject)</span><br><span class="line">        <span class="built_in">console</span>.log(status) <span class="comment">//hello</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 参数  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">当函数被调用时，会得到一个`</span><span class="built_in">arguments</span><span class="string">`数组。通过此参数可以访问所有它被调用时传递给它的`</span>参数列表<span class="string">`，包括那些没有被分配给函数声明时定义的形参的多余参数。这使得编写一个无须指定参数个数的函数成为可能。</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>js    </span><br><span class="line"> <span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> i, sum = <span class="number">0</span></span><br><span class="line">     <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">         sum += <span class="built_in">arguments</span>[i]</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> sum</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)<span class="comment">//45</span></span><br></pre></td></tr></table></figure></li></ul><p>因语言的设计错误，<code>arguments</code>并不是一个真正的数组。是一个“类似数组”的对象。有<code>length</code>属性，但没有任何数组的方法。</p><h3 id="返回"><a href="#返回" class="headerlink" title="返回"></a>返回</h3><p>函数执行时遇到关闭函数体的<code>}</code>时结束。然后把控制权交还给调用该函数的程序。</p><p><code>return</code>可以使函数提前返回，当return语句执行时函数立即返回不在执行余下的语句。</p><p>函数总是会返回一个值，若没有指定，则返回<code>undefined</code>。</p><p>若函数调用时在前面加上了<code>new</code>前缀，且返回值不是一个对象的时候，则返回<code>this</code>（该新对象）。  </p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>作用域的好处是内部函数可以访问定义他们的外部函数的参数和变量（除了<code>this</code>和<code>arguments</code>）。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> quo = <span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        get_status: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myQuo = quo(<span class="string">'amazed'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(myQuo.get_status()) <span class="comment">//amazed</span></span><br></pre></td></tr></table></figure></p><p>狭义的说，返回的那个对象即闭包，它里面的方法可以访问它被创建时所处的上下文环境。<code>status</code>访问的就说<code>对象中的status</code>属性本身,通过闭包可以让一个局部变量驻留在内存中</p><p>避免在循环中创建函数，容易引起混淆。可以现在循环之外创建一个辅助函数，让辅助函数在返回一个绑定了当前i值的函数，这样就不会导致混淆了。  </p><h3 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h3><p>将一个函数作为参数，一旦接收到响应，再调用这个函数。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> fs.readFile(<span class="string">'demo/02.js'</span>,<span class="string">'utf8'</span>,(error,data)=&gt;&#123;</span><br><span class="line"> <span class="keyword">if</span>(error) <span class="keyword">throw</span> error;</span><br><span class="line"> <span class="comment">//在异步中的错误不能被捕获 通过throw error进行错误的捕获</span></span><br><span class="line"> <span class="built_in">console</span>.log(data) &gt;&gt;a.txt;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>可以用函数和闭包构造模块。模块是一个提供接口却隐藏与实现的函数或者对象</p><p>模块模式的一般形式是：一个定义了私有变量和函数的函数；利用闭包创建可以访问私有变量和函数的特权函数；最后返回这个特权函数，或者把他们保存到一个可访问到的地方。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numberCal = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> half = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tribble = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        half: half,</span><br><span class="line">        double: double,</span><br><span class="line">        tribble: tribble</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">5</span>)) <span class="comment">//2.5</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.half(<span class="number">6</span>)) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.double(<span class="number">7</span>)) <span class="comment">//14</span></span><br><span class="line"><span class="built_in">console</span>.log(numberCal.tribble(<span class="number">7</span>)) <span class="comment">//21</span></span><br></pre></td></tr></table></figure></p><h3 id="级联"><a href="#级联" class="headerlink" title="级联"></a>级联</h3><p>如果让方法返回this而不是默认的undefined，就可以启用级联，即连续调用。</p><h3 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h3><p>函数可以将先前操作的结果记录在某个对象或者数组里，从而避免无谓的重复运算。这种优化被称为记忆（memoization）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;函数用于指定对象的行为，在其中包含一组语句。用于代码复用、信息隐藏、和组合调用。  &lt;/p&gt;
&lt;h3 id=&quot;函数对象&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="js语言精粹" scheme="http://yoursite.com/categories/js%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9/"/>
    
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
